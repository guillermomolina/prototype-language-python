# Generated from PrototypeParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

if __name__ is not None and "." in __name__:
    from .PrototypeParserBase import PrototypeParserBase
else:
    from PrototypeParserBase import PrototypeParserBase

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0085")
        buf.write("\u044c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\3\2\5\2\u00b0\n\2\3\2\5\2\u00b3\n\2\3\2\3\2\3")
        buf.write("\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00cd\n\4\3\5\3\5")
        buf.write("\5\5\u00d1\n\5\3\5\3\5\3\6\6\6\u00d6\n\6\r\6\16\6\u00d7")
        buf.write("\3\7\3\7\3\7\3\b\5\b\u00de\n\b\3\b\3\b\5\b\u00e2\n\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\5\b\u00e9\n\b\3\t\3\t\3\t\3\t\7\t\u00ef")
        buf.write("\n\t\f\t\16\t\u00f2\13\t\3\t\3\t\5\t\u00f6\n\t\5\t\u00f8")
        buf.write("\n\t\3\t\3\t\3\n\3\n\3\n\5\n\u00ff\n\n\3\13\3\13\5\13")
        buf.write("\u0103\n\13\3\f\3\f\3\r\3\r\3\r\3\16\3\16\5\16\u010c\n")
        buf.write("\16\3\16\3\16\5\16\u0110\n\16\3\17\3\17\3\17\3\20\3\20")
        buf.write("\3\20\5\20\u0118\n\20\3\21\3\21\5\21\u011c\n\21\3\21\3")
        buf.write("\21\5\21\u0120\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\5\21\u0129\n\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0131")
        buf.write("\n\22\3\22\3\22\5\22\u0135\n\22\3\23\3\23\3\23\3\23\7")
        buf.write("\23\u013b\n\23\f\23\16\23\u013e\13\23\3\23\3\23\5\23\u0142")
        buf.write("\n\23\5\23\u0144\n\23\3\23\3\23\3\24\3\24\3\24\5\24\u014b")
        buf.write("\n\24\3\25\3\25\3\25\5\25\u0150\n\25\3\26\3\26\3\26\3")
        buf.write("\27\3\27\3\27\3\27\7\27\u0159\n\27\f\27\16\27\u015c\13")
        buf.write("\27\3\30\3\30\3\30\5\30\u0161\n\30\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0170")
        buf.write("\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0184\n")
        buf.write("\34\3\34\3\34\5\34\u0188\n\34\3\34\3\34\5\34\u018c\n\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0194\n\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\5\34\u019d\n\34\3\34\3\34")
        buf.write("\3\34\5\34\u01a2\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u01a9")
        buf.write("\n\34\3\35\3\35\3\35\5\35\u01ae\n\35\3\36\3\36\3\36\5")
        buf.write("\36\u01b3\n\36\3\36\3\36\3\37\3\37\3\37\5\37\u01ba\n\37")
        buf.write("\3\37\3\37\3 \3 \3 \5 \u01c1\n \3 \3 \3!\3!\3!\5!\u01c8")
        buf.write("\n!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3")
        buf.write("$\3$\5$\u01da\n$\3$\3$\5$\u01de\n$\5$\u01e0\n$\3$\3$\3")
        buf.write("%\6%\u01e5\n%\r%\16%\u01e6\3&\3&\3&\3&\5&\u01ed\n&\3\'")
        buf.write("\3\'\3\'\5\'\u01f2\n\'\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3")
        buf.write("*\3*\3*\5*\u0201\n*\3*\5*\u0204\n*\3+\3+\3+\5+\u0209\n")
        buf.write("+\3+\5+\u020c\n+\3+\3+\3,\3,\3,\3-\3-\3-\3.\5.\u0217\n")
        buf.write(".\3.\3.\5.\u021b\n.\3.\3.\3.\5.\u0220\n.\3.\3.\3.\3/\3")
        buf.write("/\3/\3/\3\60\3\60\5\60\u022b\n\60\3\60\3\60\7\60\u022f")
        buf.write("\n\60\f\60\16\60\u0232\13\60\3\60\3\60\3\61\3\61\3\61")
        buf.write("\5\61\u0239\n\61\3\61\3\61\3\61\3\61\5\61\u023f\n\61\3")
        buf.write("\61\3\61\3\61\3\61\5\61\u0245\n\61\3\61\3\61\5\61\u0249")
        buf.write("\n\61\3\62\3\62\5\62\u024d\n\62\3\62\5\62\u0250\n\62\3")
        buf.write("\62\3\62\3\62\5\62\u0255\n\62\3\62\3\62\3\62\3\62\5\62")
        buf.write("\u025b\n\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0263\n")
        buf.write("\62\3\62\3\62\3\62\5\62\u0268\n\62\3\62\3\62\3\62\5\62")
        buf.write("\u026d\n\62\3\63\3\63\5\63\u0271\n\63\3\64\3\64\5\64\u0275")
        buf.write("\n\64\3\65\3\65\3\65\3\66\3\66\3\66\7\66\u027d\n\66\f")
        buf.write("\66\16\66\u0280\13\66\3\66\3\66\5\66\u0284\n\66\3\66\5")
        buf.write("\66\u0287\n\66\3\67\3\67\3\67\5\67\u028c\n\67\38\38\3")
        buf.write("8\39\39\59\u0293\n9\39\39\3:\6:\u0298\n:\r:\16:\u0299")
        buf.write("\3;\3;\3;\3;\3<\7<\u02a1\n<\f<\16<\u02a4\13<\3<\5<\u02a7")
        buf.write("\n<\3<\6<\u02aa\n<\r<\16<\u02ab\3<\7<\u02af\n<\f<\16<")
        buf.write("\u02b2\13<\3<\7<\u02b5\n<\f<\16<\u02b8\13<\3=\5=\u02bb")
        buf.write("\n=\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u02ca\n")
        buf.write(">\3>\5>\u02cd\n>\3>\3>\3>\5>\u02d2\n>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u02e3\n>\3>\5>\u02e6\n")
        buf.write(">\3?\3?\3?\3?\3?\3?\3?\5?\u02ef\n?\3@\3@\3@\3@\7@\u02f5")
        buf.write("\n@\f@\16@\u02f8\13@\3@\5@\u02fb\n@\5@\u02fd\n@\3@\3@")
        buf.write("\3A\5A\u0302\nA\3A\3A\5A\u0306\nA\3B\3B\3B\7B\u030b\n")
        buf.write("B\fB\16B\u030e\13B\3C\3C\3C\3C\5C\u0314\nC\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u0348\nC\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\5C\u0386\nC\3C\3C\3C\3C\3C\3C\5C\u038e\nC\3C\3")
        buf.write("C\5C\u0392\nC\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\7C\u039f")
        buf.write("\nC\fC\16C\u03a2\13C\3D\3D\3D\3E\3E\3E\3E\5E\u03ab\nE")
        buf.write("\3F\3F\3F\3F\7F\u03b1\nF\fF\16F\u03b4\13F\3F\5F\u03b7")
        buf.write("\nF\5F\u03b9\nF\3F\3F\3G\3G\5G\u03bf\nG\3G\3G\5G\u03c3")
        buf.write("\nG\3G\3G\5G\u03c7\nG\3G\3G\3G\5G\u03cc\nG\3G\3G\3G\3")
        buf.write("G\5G\u03d2\nG\3H\3H\3H\5H\u03d7\nH\3H\5H\u03da\nH\3I\3")
        buf.write("I\5I\u03de\nI\3J\3J\3K\3K\3K\3K\3K\3K\3K\5K\u03e9\nK\3")
        buf.write("L\3L\7L\u03ed\nL\fL\16L\u03f0\13L\3L\3L\3M\3M\3M\3M\3")
        buf.write("M\5M\u03f9\nM\3N\3N\3O\3O\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3R\3")
        buf.write("R\5R\u0409\nR\3S\3S\3T\3T\3T\5T\u0410\nT\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\5U\u0442\nU\3V\3V\3W\3W\3W\3W\5")
        buf.write("W\u044a\nW\3W\2\3\u0084X\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\2\16\5\2hh")
        buf.write("rr||\3\2hi\3\2\34\36\3\2\30\31\3\2\"$\3\2%(\3\2),\3\2")
        buf.write("\62>\3\2BF\3\2GJ\6\2ehqquu||\3\2tu\2\u04f5\2\u00af\3\2")
        buf.write("\2\2\4\u00b6\3\2\2\2\6\u00cc\3\2\2\2\b\u00ce\3\2\2\2\n")
        buf.write("\u00d5\3\2\2\2\f\u00d9\3\2\2\2\16\u00e8\3\2\2\2\20\u00ea")
        buf.write("\3\2\2\2\22\u00fb\3\2\2\2\24\u0102\3\2\2\2\26\u0104\3")
        buf.write("\2\2\2\30\u0106\3\2\2\2\32\u010b\3\2\2\2\34\u0111\3\2")
        buf.write("\2\2\36\u0114\3\2\2\2 \u0128\3\2\2\2\"\u0134\3\2\2\2$")
        buf.write("\u0136\3\2\2\2&\u0147\3\2\2\2(\u014f\3\2\2\2*\u0151\3")
        buf.write("\2\2\2,\u0154\3\2\2\2.\u015d\3\2\2\2\60\u0162\3\2\2\2")
        buf.write("\62\u0164\3\2\2\2\64\u0168\3\2\2\2\66\u01a8\3\2\2\28\u01ad")
        buf.write("\3\2\2\2:\u01af\3\2\2\2<\u01b6\3\2\2\2>\u01bd\3\2\2\2")
        buf.write("@\u01c4\3\2\2\2B\u01cb\3\2\2\2D\u01d1\3\2\2\2F\u01d7\3")
        buf.write("\2\2\2H\u01e4\3\2\2\2J\u01e8\3\2\2\2L\u01ee\3\2\2\2N\u01f3")
        buf.write("\3\2\2\2P\u01f7\3\2\2\2R\u01fc\3\2\2\2T\u0205\3\2\2\2")
        buf.write("V\u020f\3\2\2\2X\u0212\3\2\2\2Z\u0216\3\2\2\2\\\u0224")
        buf.write("\3\2\2\2^\u022a\3\2\2\2`\u0248\3\2\2\2b\u026c\3\2\2\2")
        buf.write("d\u026e\3\2\2\2f\u0274\3\2\2\2h\u0276\3\2\2\2j\u0286\3")
        buf.write("\2\2\2l\u0288\3\2\2\2n\u028d\3\2\2\2p\u0290\3\2\2\2r\u0297")
        buf.write("\3\2\2\2t\u029b\3\2\2\2v\u02a2\3\2\2\2x\u02ba\3\2\2\2")
        buf.write("z\u02e5\3\2\2\2|\u02ee\3\2\2\2~\u02f0\3\2\2\2\u0080\u0301")
        buf.write("\3\2\2\2\u0082\u0307\3\2\2\2\u0084\u0347\3\2\2\2\u0086")
        buf.write("\u03a3\3\2\2\2\u0088\u03aa\3\2\2\2\u008a\u03ac\3\2\2\2")
        buf.write("\u008c\u03d1\3\2\2\2\u008e\u03d9\3\2\2\2\u0090\u03dd\3")
        buf.write("\2\2\2\u0092\u03df\3\2\2\2\u0094\u03e8\3\2\2\2\u0096\u03ea")
        buf.write("\3\2\2\2\u0098\u03f8\3\2\2\2\u009a\u03fa\3\2\2\2\u009c")
        buf.write("\u03fc\3\2\2\2\u009e\u03fe\3\2\2\2\u00a0\u0402\3\2\2\2")
        buf.write("\u00a2\u0408\3\2\2\2\u00a4\u040a\3\2\2\2\u00a6\u040f\3")
        buf.write("\2\2\2\u00a8\u0441\3\2\2\2\u00aa\u0443\3\2\2\2\u00ac\u0449")
        buf.write("\3\2\2\2\u00ae\u00b0\7\3\2\2\u00af\u00ae\3\2\2\2\u00af")
        buf.write("\u00b0\3\2\2\2\u00b0\u00b2\3\2\2\2\u00b1\u00b3\5r:\2\u00b2")
        buf.write("\u00b1\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3\u00b4\3\2\2\2")
        buf.write("\u00b4\u00b5\7\2\2\3\u00b5\3\3\2\2\2\u00b6\u00b7\5\6\4")
        buf.write("\2\u00b7\5\3\2\2\2\u00b8\u00cd\5\b\5\2\u00b9\u00cd\5*")
        buf.write("\26\2\u00ba\u00cd\5\f\7\2\u00bb\u00cd\5 \21\2\u00bc\u00cd")
        buf.write("\5\60\31\2\u00bd\u00cd\5\\/\2\u00be\u00cd\5Z.\2\u00bf")
        buf.write("\u00cd\5\62\32\2\u00c0\u00cd\5\64\33\2\u00c1\u00cd\5\66")
        buf.write("\34\2\u00c2\u00cd\5:\36\2\u00c3\u00cd\5<\37\2\u00c4\u00cd")
        buf.write("\5> \2\u00c5\u00cd\5@!\2\u00c6\u00cd\5B\"\2\u00c7\u00cd")
        buf.write("\5N(\2\u00c8\u00cd\5D#\2\u00c9\u00cd\5P)\2\u00ca\u00cd")
        buf.write("\5R*\2\u00cb\u00cd\5X-\2\u00cc\u00b8\3\2\2\2\u00cc\u00b9")
        buf.write("\3\2\2\2\u00cc\u00ba\3\2\2\2\u00cc\u00bb\3\2\2\2\u00cc")
        buf.write("\u00bc\3\2\2\2\u00cc\u00bd\3\2\2\2\u00cc\u00be\3\2\2\2")
        buf.write("\u00cc\u00bf\3\2\2\2\u00cc\u00c0\3\2\2\2\u00cc\u00c1\3")
        buf.write("\2\2\2\u00cc\u00c2\3\2\2\2\u00cc\u00c3\3\2\2\2\u00cc\u00c4")
        buf.write("\3\2\2\2\u00cc\u00c5\3\2\2\2\u00cc\u00c6\3\2\2\2\u00cc")
        buf.write("\u00c7\3\2\2\2\u00cc\u00c8\3\2\2\2\u00cc\u00c9\3\2\2\2")
        buf.write("\u00cc\u00ca\3\2\2\2\u00cc\u00cb\3\2\2\2\u00cd\7\3\2\2")
        buf.write("\2\u00ce\u00d0\7\13\2\2\u00cf\u00d1\5\n\6\2\u00d0\u00cf")
        buf.write("\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2")
        buf.write("\u00d3\7\r\2\2\u00d3\t\3\2\2\2\u00d4\u00d6\5\6\4\2\u00d5")
        buf.write("\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d5\3\2\2\2")
        buf.write("\u00d7\u00d8\3\2\2\2\u00d8\13\3\2\2\2\u00d9\u00da\7p\2")
        buf.write("\2\u00da\u00db\5\16\b\2\u00db\r\3\2\2\2\u00dc\u00de\5")
        buf.write("\30\r\2\u00dd\u00dc\3\2\2\2\u00dd\u00de\3\2\2\2\u00de")
        buf.write("\u00e1\3\2\2\2\u00df\u00e2\5\32\16\2\u00e0\u00e2\5\20")
        buf.write("\t\2\u00e1\u00df\3\2\2\2\u00e1\u00e0\3\2\2\2\u00e2\u00e3")
        buf.write("\3\2\2\2\u00e3\u00e4\5\34\17\2\u00e4\u00e5\5\u00acW\2")
        buf.write("\u00e5\u00e9\3\2\2\2\u00e6\u00e7\7}\2\2\u00e7\u00e9\5")
        buf.write("\u00acW\2\u00e8\u00dd\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9")
        buf.write("\17\3\2\2\2\u00ea\u00f0\7\13\2\2\u00eb\u00ec\5\22\n\2")
        buf.write("\u00ec\u00ed\7\17\2\2\u00ed\u00ef\3\2\2\2\u00ee\u00eb")
        buf.write("\3\2\2\2\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0")
        buf.write("\u00f1\3\2\2\2\u00f1\u00f7\3\2\2\2\u00f2\u00f0\3\2\2\2")
        buf.write("\u00f3\u00f5\5\22\n\2\u00f4\u00f6\7\17\2\2\u00f5\u00f4")
        buf.write("\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f8\3\2\2\2\u00f7")
        buf.write("\u00f3\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\3\2\2\2")
        buf.write("\u00f9\u00fa\7\r\2\2\u00fa\21\3\2\2\2\u00fb\u00fe\5\24")
        buf.write("\13\2\u00fc\u00fd\7e\2\2\u00fd\u00ff\5\26\f\2\u00fe\u00fc")
        buf.write("\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\23\3\2\2\2\u0100\u0103")
        buf.write("\5\u00a2R\2\u0101\u0103\7}\2\2\u0102\u0100\3\2\2\2\u0102")
        buf.write("\u0101\3\2\2\2\u0103\25\3\2\2\2\u0104\u0105\t\2\2\2\u0105")
        buf.write("\27\3\2\2\2\u0106\u0107\5\36\20\2\u0107\u0108\7\17\2\2")
        buf.write("\u0108\31\3\2\2\2\u0109\u010c\7\34\2\2\u010a\u010c\5\u00a2")
        buf.write("R\2\u010b\u0109\3\2\2\2\u010b\u010a\3\2\2\2\u010c\u010f")
        buf.write("\3\2\2\2\u010d\u010e\7e\2\2\u010e\u0110\5\u00a2R\2\u010f")
        buf.write("\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110\33\3\2\2\2\u0111")
        buf.write("\u0112\7f\2\2\u0112\u0113\7}\2\2\u0113\35\3\2\2\2\u0114")
        buf.write("\u0117\5\u00a2R\2\u0115\u0116\7e\2\2\u0116\u0118\5\u00a2")
        buf.write("R\2\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118\37\3")
        buf.write("\2\2\2\u0119\u011b\7o\2\2\u011a\u011c\7_\2\2\u011b\u011a")
        buf.write("\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011f\3\2\2\2\u011d")
        buf.write("\u0120\5\"\22\2\u011e\u0120\5(\25\2\u011f\u011d\3\2\2")
        buf.write("\2\u011f\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0122")
        buf.write("\5\u00acW\2\u0122\u0129\3\2\2\2\u0123\u0124\7o\2\2\u0124")
        buf.write("\u0125\7_\2\2\u0125\u0126\5\u0084C\2\u0126\u0127\5\u00ac")
        buf.write("W\2\u0127\u0129\3\2\2\2\u0128\u0119\3\2\2\2\u0128\u0123")
        buf.write("\3\2\2\2\u0129!\3\2\2\2\u012a\u012b\5\32\16\2\u012b\u012c")
        buf.write("\5\34\17\2\u012c\u012d\5\u00acW\2\u012d\u0135\3\2\2\2")
        buf.write("\u012e\u0130\5$\23\2\u012f\u0131\5\34\17\2\u0130\u012f")
        buf.write("\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\3\2\2\2\u0132")
        buf.write("\u0133\5\u00acW\2\u0133\u0135\3\2\2\2\u0134\u012a\3\2")
        buf.write("\2\2\u0134\u012e\3\2\2\2\u0135#\3\2\2\2\u0136\u013c\7")
        buf.write("\13\2\2\u0137\u0138\5&\24\2\u0138\u0139\7\17\2\2\u0139")
        buf.write("\u013b\3\2\2\2\u013a\u0137\3\2\2\2\u013b\u013e\3\2\2\2")
        buf.write("\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u0143\3")
        buf.write("\2\2\2\u013e\u013c\3\2\2\2\u013f\u0141\5&\24\2\u0140\u0142")
        buf.write("\7\17\2\2\u0141\u0140\3\2\2\2\u0141\u0142\3\2\2\2\u0142")
        buf.write("\u0144\3\2\2\2\u0143\u013f\3\2\2\2\u0143\u0144\3\2\2\2")
        buf.write("\u0144\u0145\3\2\2\2\u0145\u0146\7\r\2\2\u0146%\3\2\2")
        buf.write("\2\u0147\u014a\5\24\13\2\u0148\u0149\7e\2\2\u0149\u014b")
        buf.write("\5\24\13\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b")
        buf.write("\'\3\2\2\2\u014c\u0150\5*\26\2\u014d\u0150\5\\/\2\u014e")
        buf.write("\u0150\5Z.\2\u014f\u014c\3\2\2\2\u014f\u014d\3\2\2\2\u014f")
        buf.write("\u014e\3\2\2\2\u0150)\3\2\2\2\u0151\u0152\5,\27\2\u0152")
        buf.write("\u0153\5\u00acW\2\u0153+\3\2\2\2\u0154\u0155\58\35\2\u0155")
        buf.write("\u015a\5.\30\2\u0156\u0157\7\17\2\2\u0157\u0159\5.\30")
        buf.write("\2\u0158\u0156\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158")
        buf.write("\3\2\2\2\u015a\u015b\3\2\2\2\u015b-\3\2\2\2\u015c\u015a")
        buf.write("\3\2\2\2\u015d\u0160\5\u0088E\2\u015e\u015f\7\20\2\2\u015f")
        buf.write("\u0161\5\u0084C\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2")
        buf.write("\2\2\u0161/\3\2\2\2\u0162\u0163\7\16\2\2\u0163\61\3\2")
        buf.write("\2\2\u0164\u0165\6\32\2\2\u0165\u0166\5\u0082B\2\u0166")
        buf.write("\u0167\5\u00acW\2\u0167\63\3\2\2\2\u0168\u0169\7`\2\2")
        buf.write("\u0169\u016a\7\t\2\2\u016a\u016b\5\u0082B\2\u016b\u016c")
        buf.write("\7\n\2\2\u016c\u016f\5\6\4\2\u016d\u016e\7P\2\2\u016e")
        buf.write("\u0170\5\6\4\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2")
        buf.write("\u0170\65\3\2\2\2\u0171\u0172\7L\2\2\u0172\u0173\5\6\4")
        buf.write("\2\u0173\u0174\7Z\2\2\u0174\u0175\7\t\2\2\u0175\u0176")
        buf.write("\5\u0082B\2\u0176\u0177\7\n\2\2\u0177\u0178\5\u00acW\2")
        buf.write("\u0178\u01a9\3\2\2\2\u0179\u017a\7Z\2\2\u017a\u017b\7")
        buf.write("\t\2\2\u017b\u017c\5\u0082B\2\u017c\u017d\7\n\2\2\u017d")
        buf.write("\u017e\5\6\4\2\u017e\u01a9\3\2\2\2\u017f\u0180\7X\2\2")
        buf.write("\u0180\u0183\7\t\2\2\u0181\u0184\5\u0082B\2\u0182\u0184")
        buf.write("\5,\27\2\u0183\u0181\3\2\2\2\u0183\u0182\3\2\2\2\u0183")
        buf.write("\u0184\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0187\7\16\2")
        buf.write("\2\u0186\u0188\5\u0082B\2\u0187\u0186\3\2\2\2\u0187\u0188")
        buf.write("\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018b\7\16\2\2\u018a")
        buf.write("\u018c\5\u0082B\2\u018b\u018a\3\2\2\2\u018b\u018c\3\2")
        buf.write("\2\2\u018c\u018d\3\2\2\2\u018d\u018e\7\n\2\2\u018e\u01a9")
        buf.write("\5\6\4\2\u018f\u0190\7X\2\2\u0190\u0193\7\t\2\2\u0191")
        buf.write("\u0194\5\u0084C\2\u0192\u0194\5,\27\2\u0193\u0191\3\2")
        buf.write("\2\2\u0193\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196")
        buf.write("\7c\2\2\u0196\u0197\5\u0082B\2\u0197\u0198\7\n\2\2\u0198")
        buf.write("\u0199\5\6\4\2\u0199\u01a9\3\2\2\2\u019a\u019c\7X\2\2")
        buf.write("\u019b\u019d\7r\2\2\u019c\u019b\3\2\2\2\u019c\u019d\3")
        buf.write("\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a1\7\t\2\2\u019f\u01a2")
        buf.write("\5\u0084C\2\u01a0\u01a2\5,\27\2\u01a1\u019f\3\2\2\2\u01a1")
        buf.write("\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\7g\2\2")
        buf.write("\u01a4\u01a5\5\u0082B\2\u01a5\u01a6\7\n\2\2\u01a6\u01a7")
        buf.write("\5\6\4\2\u01a7\u01a9\3\2\2\2\u01a8\u0171\3\2\2\2\u01a8")
        buf.write("\u0179\3\2\2\2\u01a8\u017f\3\2\2\2\u01a8\u018f\3\2\2\2")
        buf.write("\u01a8\u019a\3\2\2\2\u01a9\67\3\2\2\2\u01aa\u01ae\7R\2")
        buf.write("\2\u01ab\u01ae\5\u00aaV\2\u01ac\u01ae\7n\2\2\u01ad\u01aa")
        buf.write("\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ac\3\2\2\2\u01ae")
        buf.write("9\3\2\2\2\u01af\u01b2\7W\2\2\u01b0\u01b1\6\36\3\2\u01b1")
        buf.write("\u01b3\5\u00a4S\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3\2")
        buf.write("\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b5\5\u00acW\2\u01b5")
        buf.write(";\3\2\2\2\u01b6\u01b9\7K\2\2\u01b7\u01b8\6\37\4\2\u01b8")
        buf.write("\u01ba\5\u00a4S\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2")
        buf.write("\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bc\5\u00acW\2\u01bc")
        buf.write("=\3\2\2\2\u01bd\u01c0\7U\2\2\u01be\u01bf\6 \5\2\u01bf")
        buf.write("\u01c1\5\u0082B\2\u01c0\u01be\3\2\2\2\u01c0\u01c1\3\2")
        buf.write("\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c3\5\u00acW\2\u01c3")
        buf.write("?\3\2\2\2\u01c4\u01c7\t\3\2\2\u01c5\u01c6\6!\6\2\u01c6")
        buf.write("\u01c8\5\u0082B\2\u01c7\u01c5\3\2\2\2\u01c7\u01c8\3\2")
        buf.write("\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca\5\u00acW\2\u01ca")
        buf.write("A\3\2\2\2\u01cb\u01cc\7^\2\2\u01cc\u01cd\7\t\2\2\u01cd")
        buf.write("\u01ce\5\u0082B\2\u01ce\u01cf\7\n\2\2\u01cf\u01d0\5\6")
        buf.write("\4\2\u01d0C\3\2\2\2\u01d1\u01d2\7Y\2\2\u01d2\u01d3\7\t")
        buf.write("\2\2\u01d3\u01d4\5\u0082B\2\u01d4\u01d5\7\n\2\2\u01d5")
        buf.write("\u01d6\5F$\2\u01d6E\3\2\2\2\u01d7\u01d9\7\13\2\2\u01d8")
        buf.write("\u01da\5H%\2\u01d9\u01d8\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write("\u01df\3\2\2\2\u01db\u01dd\5L\'\2\u01dc\u01de\5H%\2\u01dd")
        buf.write("\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01e0\3\2\2\2")
        buf.write("\u01df\u01db\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1\3")
        buf.write("\2\2\2\u01e1\u01e2\7\r\2\2\u01e2G\3\2\2\2\u01e3\u01e5")
        buf.write("\5J&\2\u01e4\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e4")
        buf.write("\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7I\3\2\2\2\u01e8\u01e9")
        buf.write("\7O\2\2\u01e9\u01ea\5\u0082B\2\u01ea\u01ec\7\23\2\2\u01eb")
        buf.write("\u01ed\5\n\6\2\u01ec\u01eb\3\2\2\2\u01ec\u01ed\3\2\2\2")
        buf.write("\u01edK\3\2\2\2\u01ee\u01ef\7_\2\2\u01ef\u01f1\7\23\2")
        buf.write("\2\u01f0\u01f2\5\n\6\2\u01f1\u01f0\3\2\2\2\u01f1\u01f2")
        buf.write("\3\2\2\2\u01f2M\3\2\2\2\u01f3\u01f4\5\u00a4S\2\u01f4\u01f5")
        buf.write("\7\23\2\2\u01f5\u01f6\5\6\4\2\u01f6O\3\2\2\2\u01f7\u01f8")
        buf.write("\7a\2\2\u01f8\u01f9\6)\7\2\u01f9\u01fa\5\u0082B\2\u01fa")
        buf.write("\u01fb\5\u00acW\2\u01fbQ\3\2\2\2\u01fc\u01fd\7d\2\2\u01fd")
        buf.write("\u0203\5\b\5\2\u01fe\u0200\5T+\2\u01ff\u0201\5V,\2\u0200")
        buf.write("\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0204\3\2\2\2")
        buf.write("\u0202\u0204\5V,\2\u0203\u01fe\3\2\2\2\u0203\u0202\3\2")
        buf.write("\2\2\u0204S\3\2\2\2\u0205\u020b\7S\2\2\u0206\u0208\7\t")
        buf.write("\2\2\u0207\u0209\5\u0088E\2\u0208\u0207\3\2\2\2\u0208")
        buf.write("\u0209\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020c\7\n\2\2")
        buf.write("\u020b\u0206\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020d\3")
        buf.write("\2\2\2\u020d\u020e\5\b\5\2\u020eU\3\2\2\2\u020f\u0210")
        buf.write("\7T\2\2\u0210\u0211\5\b\5\2\u0211W\3\2\2\2\u0212\u0213")
        buf.write("\7[\2\2\u0213\u0214\5\u00acW\2\u0214Y\3\2\2\2\u0215\u0217")
        buf.write("\7q\2\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217")
        buf.write("\u0218\3\2\2\2\u0218\u021a\7\\\2\2\u0219\u021b\7\34\2")
        buf.write("\2\u021a\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021c")
        buf.write("\3\2\2\2\u021c\u021d\5\u00a4S\2\u021d\u021f\7\t\2\2\u021e")
        buf.write("\u0220\5j\66\2\u021f\u021e\3\2\2\2\u021f\u0220\3\2\2\2")
        buf.write("\u0220\u0221\3\2\2\2\u0221\u0222\7\n\2\2\u0222\u0223\5")
        buf.write("p9\2\u0223[\3\2\2\2\u0224\u0225\7j\2\2\u0225\u0226\5\u00a4")
        buf.write("S\2\u0226\u0227\5^\60\2\u0227]\3\2\2\2\u0228\u0229\7l")
        buf.write("\2\2\u0229\u022b\5\u0084C\2\u022a\u0228\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u0230\7\13\2")
        buf.write("\2\u022d\u022f\5`\61\2\u022e\u022d\3\2\2\2\u022f\u0232")
        buf.write("\3\2\2\2\u0230\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231")
        buf.write("\u0233\3\2\2\2\u0232\u0230\3\2\2\2\u0233\u0234\7\r\2\2")
        buf.write("\u0234_\3\2\2\2\u0235\u0239\7{\2\2\u0236\u0237\6\61\b")
        buf.write("\2\u0237\u0239\5\u00a4S\2\u0238\u0235\3\2\2\2\u0238\u0236")
        buf.write("\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023a\3\2\2\2\u023a")
        buf.write("\u0249\5b\62\2\u023b\u023f\7{\2\2\u023c\u023d\6\61\t\2")
        buf.write("\u023d\u023f\5\u00a4S\2\u023e\u023b\3\2\2\2\u023e\u023c")
        buf.write("\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0240\3\2\2\2\u0240")
        buf.write("\u0249\5d\63\2\u0241\u0245\7{\2\2\u0242\u0243\6\61\n\2")
        buf.write("\u0243\u0245\5\u00a4S\2\u0244\u0241\3\2\2\2\u0244\u0242")
        buf.write("\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0249\5\b\5\2\u0247")
        buf.write("\u0249\5\60\31\2\u0248\u0238\3\2\2\2\u0248\u023e\3\2\2")
        buf.write("\2\u0248\u0244\3\2\2\2\u0248\u0247\3\2\2\2\u0249a\3\2")
        buf.write("\2\2\u024a\u024b\7q\2\2\u024b\u024d\6\62\13\2\u024c\u024a")
        buf.write("\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024f\3\2\2\2\u024e")
        buf.write("\u0250\7\34\2\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2\2")
        buf.write("\2\u0250\u0251\3\2\2\2\u0251\u0252\5f\64\2\u0252\u0254")
        buf.write("\7\t\2\2\u0253\u0255\5j\66\2\u0254\u0253\3\2\2\2\u0254")
        buf.write("\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257\7\n\2\2")
        buf.write("\u0257\u0258\5p9\2\u0258\u026d\3\2\2\2\u0259\u025b\7\34")
        buf.write("\2\2\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025c")
        buf.write("\3\2\2\2\u025c\u025d\5\u009eP\2\u025d\u025e\7\t\2\2\u025e")
        buf.write("\u025f\7\n\2\2\u025f\u0260\5p9\2\u0260\u026d\3\2\2\2\u0261")
        buf.write("\u0263\7\34\2\2\u0262\u0261\3\2\2\2\u0262\u0263\3\2\2")
        buf.write("\2\u0263\u0264\3\2\2\2\u0264\u0265\5\u00a0Q\2\u0265\u0267")
        buf.write("\7\t\2\2\u0266\u0268\5j\66\2\u0267\u0266\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026a\7\n\2\2")
        buf.write("\u026a\u026b\5p9\2\u026b\u026d\3\2\2\2\u026c\u024c\3\2")
        buf.write("\2\2\u026c\u025a\3\2\2\2\u026c\u0262\3\2\2\2\u026dc\3")
        buf.write("\2\2\2\u026e\u0270\5f\64\2\u026f\u0271\5\u0086D\2\u0270")
        buf.write("\u026f\3\2\2\2\u0270\u0271\3\2\2\2\u0271e\3\2\2\2\u0272")
        buf.write("\u0275\5|?\2\u0273\u0275\5h\65\2\u0274\u0272\3\2\2\2\u0274")
        buf.write("\u0273\3\2\2\2\u0275g\3\2\2\2\u0276\u0277\7!\2\2\u0277")
        buf.write("\u0278\5\u00a2R\2\u0278i\3\2\2\2\u0279\u027e\5l\67\2\u027a")
        buf.write("\u027b\7\17\2\2\u027b\u027d\5l\67\2\u027c\u027a\3\2\2")
        buf.write("\2\u027d\u0280\3\2\2\2\u027e\u027c\3\2\2\2\u027e\u027f")
        buf.write("\3\2\2\2\u027f\u0283\3\2\2\2\u0280\u027e\3\2\2\2\u0281")
        buf.write("\u0282\7\17\2\2\u0282\u0284\5n8\2\u0283\u0281\3\2\2\2")
        buf.write("\u0283\u0284\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0287\5")
        buf.write("n8\2\u0286\u0279\3\2\2\2\u0286\u0285\3\2\2\2\u0287k\3")
        buf.write("\2\2\2\u0288\u028b\5\u0088E\2\u0289\u028a\7\20\2\2\u028a")
        buf.write("\u028c\5\u0084C\2\u028b\u0289\3\2\2\2\u028b\u028c\3\2")
        buf.write("\2\2\u028cm\3\2\2\2\u028d\u028e\7\24\2\2\u028e\u028f\5")
        buf.write("\u0084C\2\u028fo\3\2\2\2\u0290\u0292\7\13\2\2\u0291\u0293")
        buf.write("\5r:\2\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294")
        buf.write("\3\2\2\2\u0294\u0295\7\r\2\2\u0295q\3\2\2\2\u0296\u0298")
        buf.write("\5\4\3\2\u0297\u0296\3\2\2\2\u0298\u0299\3\2\2\2\u0299")
        buf.write("\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029as\3\2\2\2\u029b")
        buf.write("\u029c\7\7\2\2\u029c\u029d\5v<\2\u029d\u029e\7\b\2\2\u029e")
        buf.write("u\3\2\2\2\u029f\u02a1\7\17\2\2\u02a0\u029f\3\2\2\2\u02a1")
        buf.write("\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a3\3\2\2\2")
        buf.write("\u02a3\u02a6\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a5\u02a7\5")
        buf.write("x=\2\u02a6\u02a5\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02b0")
        buf.write("\3\2\2\2\u02a8\u02aa\7\17\2\2\u02a9\u02a8\3\2\2\2\u02aa")
        buf.write("\u02ab\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac\3\2\2\2")
        buf.write("\u02ac\u02ad\3\2\2\2\u02ad\u02af\5x=\2\u02ae\u02a9\3\2")
        buf.write("\2\2\u02af\u02b2\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b0\u02b1")
        buf.write("\3\2\2\2\u02b1\u02b6\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b3")
        buf.write("\u02b5\7\17\2\2\u02b4\u02b3\3\2\2\2\u02b5\u02b8\3\2\2")
        buf.write("\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7w\3\2")
        buf.write("\2\2\u02b8\u02b6\3\2\2\2\u02b9\u02bb\7\24\2\2\u02ba\u02b9")
        buf.write("\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc")
        buf.write("\u02bd\5\u0084C\2\u02bdy\3\2\2\2\u02be\u02bf\5|?\2\u02bf")
        buf.write("\u02c0\7\23\2\2\u02c0\u02c1\5\u0084C\2\u02c1\u02e6\3\2")
        buf.write("\2\2\u02c2\u02c3\7\7\2\2\u02c3\u02c4\5\u0084C\2\u02c4")
        buf.write("\u02c5\7\b\2\2\u02c5\u02c6\7\23\2\2\u02c6\u02c7\5\u0084")
        buf.write("C\2\u02c7\u02e6\3\2\2\2\u02c8\u02ca\7q\2\2\u02c9\u02c8")
        buf.write("\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc\3\2\2\2\u02cb")
        buf.write("\u02cd\7\34\2\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd\3\2\2")
        buf.write("\2\u02cd\u02ce\3\2\2\2\u02ce\u02cf\5|?\2\u02cf\u02d1\7")
        buf.write("\t\2\2\u02d0\u02d2\5j\66\2\u02d1\u02d0\3\2\2\2\u02d1\u02d2")
        buf.write("\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d4\7\n\2\2\u02d4")
        buf.write("\u02d5\5p9\2\u02d5\u02e6\3\2\2\2\u02d6\u02d7\5\u009eP")
        buf.write("\2\u02d7\u02d8\7\t\2\2\u02d8\u02d9\7\n\2\2\u02d9\u02da")
        buf.write("\5p9\2\u02da\u02e6\3\2\2\2\u02db\u02dc\5\u00a0Q\2\u02dc")
        buf.write("\u02dd\7\t\2\2\u02dd\u02de\5l\67\2\u02de\u02df\7\n\2\2")
        buf.write("\u02df\u02e0\5p9\2\u02e0\u02e6\3\2\2\2\u02e1\u02e3\7\24")
        buf.write("\2\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4")
        buf.write("\3\2\2\2\u02e4\u02e6\5\u0084C\2\u02e5\u02be\3\2\2\2\u02e5")
        buf.write("\u02c2\3\2\2\2\u02e5\u02c9\3\2\2\2\u02e5\u02d6\3\2\2\2")
        buf.write("\u02e5\u02db\3\2\2\2\u02e5\u02e2\3\2\2\2\u02e6{\3\2\2")
        buf.write("\2\u02e7\u02ef\5\u00a2R\2\u02e8\u02ef\7}\2\2\u02e9\u02ef")
        buf.write("\5\u009aN\2\u02ea\u02eb\7\7\2\2\u02eb\u02ec\5\u0084C\2")
        buf.write("\u02ec\u02ed\7\b\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02e7\3")
        buf.write("\2\2\2\u02ee\u02e8\3\2\2\2\u02ee\u02e9\3\2\2\2\u02ee\u02ea")
        buf.write("\3\2\2\2\u02ef}\3\2\2\2\u02f0\u02fc\7\t\2\2\u02f1\u02f6")
        buf.write("\5\u0080A\2\u02f2\u02f3\7\17\2\2\u02f3\u02f5\5\u0080A")
        buf.write("\2\u02f4\u02f2\3\2\2\2\u02f5\u02f8\3\2\2\2\u02f6\u02f4")
        buf.write("\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02fa\3\2\2\2\u02f8")
        buf.write("\u02f6\3\2\2\2\u02f9\u02fb\7\17\2\2\u02fa\u02f9\3\2\2")
        buf.write("\2\u02fa\u02fb\3\2\2\2\u02fb\u02fd\3\2\2\2\u02fc\u02f1")
        buf.write("\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe")
        buf.write("\u02ff\7\n\2\2\u02ff\177\3\2\2\2\u0300\u0302\7\24\2\2")
        buf.write("\u0301\u0300\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0305\3")
        buf.write("\2\2\2\u0303\u0306\5\u0084C\2\u0304\u0306\5\u00a4S\2\u0305")
        buf.write("\u0303\3\2\2\2\u0305\u0304\3\2\2\2\u0306\u0081\3\2\2\2")
        buf.write("\u0307\u030c\5\u0084C\2\u0308\u0309\7\17\2\2\u0309\u030b")
        buf.write("\5\u0084C\2\u030a\u0308\3\2\2\2\u030b\u030e\3\2\2\2\u030c")
        buf.write("\u030a\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u0083\3\2\2\2")
        buf.write("\u030e\u030c\3\2\2\2\u030f\u0310\bC\1\2\u0310\u0348\5")
        buf.write("\u008cG\2\u0311\u0313\7j\2\2\u0312\u0314\5\u00a4S\2\u0313")
        buf.write("\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315\3\2\2\2")
        buf.write("\u0315\u0348\5^\60\2\u0316\u0317\7Q\2\2\u0317\u0318\5")
        buf.write("\u00a4S\2\u0318\u0319\5~@\2\u0319\u0348\3\2\2\2\u031a")
        buf.write("\u031b\7Q\2\2\u031b\u031c\5\u0084C\2\u031c\u031d\5~@\2")
        buf.write("\u031d\u0348\3\2\2\2\u031e\u031f\7Q\2\2\u031f\u0348\5")
        buf.write("\u0084C,\u0320\u0321\7Q\2\2\u0321\u0322\7\25\2\2\u0322")
        buf.write("\u0348\5\u00a4S\2\u0323\u0324\7b\2\2\u0324\u0348\5\u0084")
        buf.write("C\'\u0325\u0326\7V\2\2\u0326\u0348\5\u0084C&\u0327\u0328")
        buf.write("\7N\2\2\u0328\u0348\5\u0084C%\u0329\u032a\7\26\2\2\u032a")
        buf.write("\u0348\5\u0084C$\u032b\u032c\7\27\2\2\u032c\u0348\5\u0084")
        buf.write("C#\u032d\u032e\7\30\2\2\u032e\u0348\5\u0084C\"\u032f\u0330")
        buf.write("\7\31\2\2\u0330\u0348\5\u0084C!\u0331\u0332\7\32\2\2\u0332")
        buf.write("\u0348\5\u0084C \u0333\u0334\7\33\2\2\u0334\u0348\5\u0084")
        buf.write("C\37\u0335\u0336\7r\2\2\u0336\u0348\5\u0084C\36\u0337")
        buf.write("\u0338\7p\2\2\u0338\u0339\7\t\2\2\u0339\u033a\5\u0084")
        buf.write("C\2\u033a\u033b\7\n\2\2\u033b\u0348\3\2\2\2\u033c\u0348")
        buf.write("\5@!\2\u033d\u0348\7]\2\2\u033e\u0348\5\u00a4S\2\u033f")
        buf.write("\u0348\7m\2\2\u0340\u0348\5\u0094K\2\u0341\u0348\5t;\2")
        buf.write("\u0342\u0348\5\u008aF\2\u0343\u0344\7\t\2\2\u0344\u0345")
        buf.write("\5\u0082B\2\u0345\u0346\7\n\2\2\u0346\u0348\3\2\2\2\u0347")
        buf.write("\u030f\3\2\2\2\u0347\u0311\3\2\2\2\u0347\u0316\3\2\2\2")
        buf.write("\u0347\u031a\3\2\2\2\u0347\u031e\3\2\2\2\u0347\u0320\3")
        buf.write("\2\2\2\u0347\u0323\3\2\2\2\u0347\u0325\3\2\2\2\u0347\u0327")
        buf.write("\3\2\2\2\u0347\u0329\3\2\2\2\u0347\u032b\3\2\2\2\u0347")
        buf.write("\u032d\3\2\2\2\u0347\u032f\3\2\2\2\u0347\u0331\3\2\2\2")
        buf.write("\u0347\u0333\3\2\2\2\u0347\u0335\3\2\2\2\u0347\u0337\3")
        buf.write("\2\2\2\u0347\u033c\3\2\2\2\u0347\u033d\3\2\2\2\u0347\u033e")
        buf.write("\3\2\2\2\u0347\u033f\3\2\2\2\u0347\u0340\3\2\2\2\u0347")
        buf.write("\u0341\3\2\2\2\u0347\u0342\3\2\2\2\u0347\u0343\3\2\2\2")
        buf.write("\u0348\u03a0\3\2\2\2\u0349\u034a\f\61\2\2\u034a\u034b")
        buf.write("\7\22\2\2\u034b\u039f\5\u0084C\62\u034c\u034d\f\35\2\2")
        buf.write("\u034d\u034e\7\37\2\2\u034e\u039f\5\u0084C\35\u034f\u0350")
        buf.write("\f\34\2\2\u0350\u0351\t\4\2\2\u0351\u039f\5\u0084C\35")
        buf.write("\u0352\u0353\f\33\2\2\u0353\u0354\t\5\2\2\u0354\u039f")
        buf.write("\5\u0084C\34\u0355\u0356\f\32\2\2\u0356\u0357\7 \2\2\u0357")
        buf.write("\u039f\5\u0084C\33\u0358\u0359\f\31\2\2\u0359\u035a\t")
        buf.write("\6\2\2\u035a\u039f\5\u0084C\32\u035b\u035c\f\30\2\2\u035c")
        buf.write("\u035d\t\7\2\2\u035d\u039f\5\u0084C\31\u035e\u035f\f\27")
        buf.write("\2\2\u035f\u0360\7M\2\2\u0360\u039f\5\u0084C\30\u0361")
        buf.write("\u0362\f\26\2\2\u0362\u0363\7c\2\2\u0363\u039f\5\u0084")
        buf.write("C\27\u0364\u0365\f\25\2\2\u0365\u0366\t\b\2\2\u0366\u039f")
        buf.write("\5\u0084C\26\u0367\u0368\f\24\2\2\u0368\u0369\7-\2\2\u0369")
        buf.write("\u039f\5\u0084C\25\u036a\u036b\f\23\2\2\u036b\u036c\7")
        buf.write(".\2\2\u036c\u039f\5\u0084C\24\u036d\u036e\f\22\2\2\u036e")
        buf.write("\u036f\7/\2\2\u036f\u039f\5\u0084C\23\u0370\u0371\f\21")
        buf.write("\2\2\u0371\u0372\7\60\2\2\u0372\u039f\5\u0084C\22\u0373")
        buf.write("\u0374\f\20\2\2\u0374\u0375\7\61\2\2\u0375\u039f\5\u0084")
        buf.write("C\21\u0376\u0377\f\17\2\2\u0377\u0378\7\21\2\2\u0378\u0379")
        buf.write("\5\u0084C\2\u0379\u037a\7\23\2\2\u037a\u037b\5\u0084C")
        buf.write("\20\u037b\u039f\3\2\2\2\u037c\u037d\f\16\2\2\u037d\u037e")
        buf.write("\7\20\2\2\u037e\u039f\5\u0084C\16\u037f\u0380\f\r\2\2")
        buf.write("\u0380\u0381\5\u0092J\2\u0381\u0382\5\u0084C\r\u0382\u039f")
        buf.write("\3\2\2\2\u0383\u0385\f\60\2\2\u0384\u0386\7\22\2\2\u0385")
        buf.write("\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387\3\2\2\2")
        buf.write("\u0387\u0388\7\7\2\2\u0388\u0389\5\u0082B\2\u0389\u038a")
        buf.write("\7\b\2\2\u038a\u039f\3\2\2\2\u038b\u038d\f/\2\2\u038c")
        buf.write("\u038e\7\21\2\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2")
        buf.write("\2\u038e\u038f\3\2\2\2\u038f\u0391\7\25\2\2\u0390\u0392")
        buf.write("\7!\2\2\u0391\u0390\3\2\2\2\u0391\u0392\3\2\2\2\u0392")
        buf.write("\u0393\3\2\2\2\u0393\u039f\5\u00a2R\2\u0394\u0395\f+\2")
        buf.write("\2\u0395\u039f\5~@\2\u0396\u0397\f)\2\2\u0397\u0398\6")
        buf.write("C\"\2\u0398\u039f\7\26\2\2\u0399\u039a\f(\2\2\u039a\u039b")
        buf.write("\6C$\2\u039b\u039f\7\27\2\2\u039c\u039d\f\13\2\2\u039d")
        buf.write("\u039f\5\u0096L\2\u039e\u0349\3\2\2\2\u039e\u034c\3\2")
        buf.write("\2\2\u039e\u034f\3\2\2\2\u039e\u0352\3\2\2\2\u039e\u0355")
        buf.write("\3\2\2\2\u039e\u0358\3\2\2\2\u039e\u035b\3\2\2\2\u039e")
        buf.write("\u035e\3\2\2\2\u039e\u0361\3\2\2\2\u039e\u0364\3\2\2\2")
        buf.write("\u039e\u0367\3\2\2\2\u039e\u036a\3\2\2\2\u039e\u036d\3")
        buf.write("\2\2\2\u039e\u0370\3\2\2\2\u039e\u0373\3\2\2\2\u039e\u0376")
        buf.write("\3\2\2\2\u039e\u037c\3\2\2\2\u039e\u037f\3\2\2\2\u039e")
        buf.write("\u0383\3\2\2\2\u039e\u038b\3\2\2\2\u039e\u0394\3\2\2\2")
        buf.write("\u039e\u0396\3\2\2\2\u039e\u0399\3\2\2\2\u039e\u039c\3")
        buf.write("\2\2\2\u039f\u03a2\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1")
        buf.write("\3\2\2\2\u03a1\u0085\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3")
        buf.write("\u03a4\7\20\2\2\u03a4\u03a5\5\u0084C\2\u03a5\u0087\3\2")
        buf.write("\2\2\u03a6\u03ab\5\u00a4S\2\u03a7\u03ab\5\u00a8U\2\u03a8")
        buf.write("\u03ab\5t;\2\u03a9\u03ab\5\u008aF\2\u03aa\u03a6\3\2\2")
        buf.write("\2\u03aa\u03a7\3\2\2\2\u03aa\u03a8\3\2\2\2\u03aa\u03a9")
        buf.write("\3\2\2\2\u03ab\u0089\3\2\2\2\u03ac\u03b8\7\13\2\2\u03ad")
        buf.write("\u03b2\5z>\2\u03ae\u03af\7\17\2\2\u03af\u03b1\5z>\2\u03b0")
        buf.write("\u03ae\3\2\2\2\u03b1\u03b4\3\2\2\2\u03b2\u03b0\3\2\2\2")
        buf.write("\u03b2\u03b3\3\2\2\2\u03b3\u03b6\3\2\2\2\u03b4\u03b2\3")
        buf.write("\2\2\2\u03b5\u03b7\7\17\2\2\u03b6\u03b5\3\2\2\2\u03b6")
        buf.write("\u03b7\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8\u03ad\3\2\2\2")
        buf.write("\u03b8\u03b9\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bb\7")
        buf.write("\r\2\2\u03bb\u008b\3\2\2\2\u03bc\u03d2\5Z.\2\u03bd\u03bf")
        buf.write("\7q\2\2\u03be\u03bd\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf")
        buf.write("\u03c0\3\2\2\2\u03c0\u03c2\7\\\2\2\u03c1\u03c3\7\34\2")
        buf.write("\2\u03c2\u03c1\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c4")
        buf.write("\3\2\2\2\u03c4\u03c6\7\t\2\2\u03c5\u03c7\5j\66\2\u03c6")
        buf.write("\u03c5\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c8\3\2\2\2")
        buf.write("\u03c8\u03c9\7\n\2\2\u03c9\u03d2\5p9\2\u03ca\u03cc\7q")
        buf.write("\2\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd")
        buf.write("\3\2\2\2\u03cd\u03ce\5\u008eH\2\u03ce\u03cf\7?\2\2\u03cf")
        buf.write("\u03d0\5\u0090I\2\u03d0\u03d2\3\2\2\2\u03d1\u03bc\3\2")
        buf.write("\2\2\u03d1\u03be\3\2\2\2\u03d1\u03cb\3\2\2\2\u03d2\u008d")
        buf.write("\3\2\2\2\u03d3\u03da\5|?\2\u03d4\u03d6\7\t\2\2\u03d5\u03d7")
        buf.write("\5j\66\2\u03d6\u03d5\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7")
        buf.write("\u03d8\3\2\2\2\u03d8\u03da\7\n\2\2\u03d9\u03d3\3\2\2\2")
        buf.write("\u03d9\u03d4\3\2\2\2\u03da\u008f\3\2\2\2\u03db\u03de\5")
        buf.write("\u0084C\2\u03dc\u03de\5p9\2\u03dd\u03db\3\2\2\2\u03dd")
        buf.write("\u03dc\3\2\2\2\u03de\u0091\3\2\2\2\u03df\u03e0\t\t\2\2")
        buf.write("\u03e0\u0093\3\2\2\2\u03e1\u03e9\7@\2\2\u03e2\u03e9\7")
        buf.write("A\2\2\u03e3\u03e9\7}\2\2\u03e4\u03e9\5\u0096L\2\u03e5")
        buf.write("\u03e9\7\6\2\2\u03e6\u03e9\5\u009aN\2\u03e7\u03e9\5\u009c")
        buf.write("O\2\u03e8\u03e1\3\2\2\2\u03e8\u03e2\3\2\2\2\u03e8\u03e3")
        buf.write("\3\2\2\2\u03e8\u03e4\3\2\2\2\u03e8\u03e5\3\2\2\2\u03e8")
        buf.write("\u03e6\3\2\2\2\u03e8\u03e7\3\2\2\2\u03e9\u0095\3\2\2\2")
        buf.write("\u03ea\u03ee\7~\2\2\u03eb\u03ed\5\u0098M\2\u03ec\u03eb")
        buf.write("\3\2\2\2\u03ed\u03f0\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee")
        buf.write("\u03ef\3\2\2\2\u03ef\u03f1\3\2\2\2\u03f0\u03ee\3\2\2\2")
        buf.write("\u03f1\u03f2\7~\2\2\u03f2\u0097\3\2\2\2\u03f3\u03f9\7")
        buf.write("\u0085\2\2\u03f4\u03f5\7\u0084\2\2\u03f5\u03f6\5\u0084")
        buf.write("C\2\u03f6\u03f7\7\f\2\2\u03f7\u03f9\3\2\2\2\u03f8\u03f3")
        buf.write("\3\2\2\2\u03f8\u03f4\3\2\2\2\u03f9\u0099\3\2\2\2\u03fa")
        buf.write("\u03fb\t\n\2\2\u03fb\u009b\3\2\2\2\u03fc\u03fd\t\13\2")
        buf.write("\2\u03fd\u009d\3\2\2\2\u03fe\u03ff\6P&\2\u03ff\u0400\5")
        buf.write("\u00a4S\2\u0400\u0401\5f\64\2\u0401\u009f\3\2\2\2\u0402")
        buf.write("\u0403\6Q\'\2\u0403\u0404\5\u00a4S\2\u0404\u0405\5f\64")
        buf.write("\2\u0405\u00a1\3\2\2\2\u0406\u0409\5\u00a4S\2\u0407\u0409")
        buf.write("\5\u00a6T\2\u0408\u0406\3\2\2\2\u0408\u0407\3\2\2\2\u0409")
        buf.write("\u00a3\3\2\2\2\u040a\u040b\t\f\2\2\u040b\u00a5\3\2\2\2")
        buf.write("\u040c\u0410\5\u00a8U\2\u040d\u0410\7@\2\2\u040e\u0410")
        buf.write("\7A\2\2\u040f\u040c\3\2\2\2\u040f\u040d\3\2\2\2\u040f")
        buf.write("\u040e\3\2\2\2\u0410\u00a7\3\2\2\2\u0411\u0442\7K\2\2")
        buf.write("\u0412\u0442\7L\2\2\u0413\u0442\7M\2\2\u0414\u0442\7N")
        buf.write("\2\2\u0415\u0442\7O\2\2\u0416\u0442\7P\2\2\u0417\u0442")
        buf.write("\7Q\2\2\u0418\u0442\7R\2\2\u0419\u0442\7S\2\2\u041a\u0442")
        buf.write("\7T\2\2\u041b\u0442\7U\2\2\u041c\u0442\7V\2\2\u041d\u0442")
        buf.write("\7W\2\2\u041e\u0442\7X\2\2\u041f\u0442\7Y\2\2\u0420\u0442")
        buf.write("\7Z\2\2\u0421\u0442\7[\2\2\u0422\u0442\7\\\2\2\u0423\u0442")
        buf.write("\7]\2\2\u0424\u0442\7^\2\2\u0425\u0442\7_\2\2\u0426\u0442")
        buf.write("\7`\2\2\u0427\u0442\7a\2\2\u0428\u0442\7b\2\2\u0429\u0442")
        buf.write("\7c\2\2\u042a\u0442\7d\2\2\u042b\u0442\7j\2\2\u042c\u0442")
        buf.write("\7k\2\2\u042d\u0442\7l\2\2\u042e\u0442\7m\2\2\u042f\u0442")
        buf.write("\7n\2\2\u0430\u0442\7o\2\2\u0431\u0442\7p\2\2\u0432\u0442")
        buf.write("\7s\2\2\u0433\u0442\5\u00aaV\2\u0434\u0442\7v\2\2\u0435")
        buf.write("\u0442\7w\2\2\u0436\u0442\7x\2\2\u0437\u0442\7y\2\2\u0438")
        buf.write("\u0442\7z\2\2\u0439\u0442\7{\2\2\u043a\u0442\7h\2\2\u043b")
        buf.write("\u0442\7i\2\2\u043c\u0442\7q\2\2\u043d\u0442\7r\2\2\u043e")
        buf.write("\u0442\7f\2\2\u043f\u0442\7e\2\2\u0440\u0442\7g\2\2\u0441")
        buf.write("\u0411\3\2\2\2\u0441\u0412\3\2\2\2\u0441\u0413\3\2\2\2")
        buf.write("\u0441\u0414\3\2\2\2\u0441\u0415\3\2\2\2\u0441\u0416\3")
        buf.write("\2\2\2\u0441\u0417\3\2\2\2\u0441\u0418\3\2\2\2\u0441\u0419")
        buf.write("\3\2\2\2\u0441\u041a\3\2\2\2\u0441\u041b\3\2\2\2\u0441")
        buf.write("\u041c\3\2\2\2\u0441\u041d\3\2\2\2\u0441\u041e\3\2\2\2")
        buf.write("\u0441\u041f\3\2\2\2\u0441\u0420\3\2\2\2\u0441\u0421\3")
        buf.write("\2\2\2\u0441\u0422\3\2\2\2\u0441\u0423\3\2\2\2\u0441\u0424")
        buf.write("\3\2\2\2\u0441\u0425\3\2\2\2\u0441\u0426\3\2\2\2\u0441")
        buf.write("\u0427\3\2\2\2\u0441\u0428\3\2\2\2\u0441\u0429\3\2\2\2")
        buf.write("\u0441\u042a\3\2\2\2\u0441\u042b\3\2\2\2\u0441\u042c\3")
        buf.write("\2\2\2\u0441\u042d\3\2\2\2\u0441\u042e\3\2\2\2\u0441\u042f")
        buf.write("\3\2\2\2\u0441\u0430\3\2\2\2\u0441\u0431\3\2\2\2\u0441")
        buf.write("\u0432\3\2\2\2\u0441\u0433\3\2\2\2\u0441\u0434\3\2\2\2")
        buf.write("\u0441\u0435\3\2\2\2\u0441\u0436\3\2\2\2\u0441\u0437\3")
        buf.write("\2\2\2\u0441\u0438\3\2\2\2\u0441\u0439\3\2\2\2\u0441\u043a")
        buf.write("\3\2\2\2\u0441\u043b\3\2\2\2\u0441\u043c\3\2\2\2\u0441")
        buf.write("\u043d\3\2\2\2\u0441\u043e\3\2\2\2\u0441\u043f\3\2\2\2")
        buf.write("\u0441\u0440\3\2\2\2\u0442\u00a9\3\2\2\2\u0443\u0444\t")
        buf.write("\r\2\2\u0444\u00ab\3\2\2\2\u0445\u044a\7\16\2\2\u0446")
        buf.write("\u044a\7\2\2\3\u0447\u044a\6W(\2\u0448\u044a\6W)\2\u0449")
        buf.write("\u0445\3\2\2\2\u0449\u0446\3\2\2\2\u0449\u0447\3\2\2\2")
        buf.write("\u0449\u0448\3\2\2\2\u044a\u00ad\3\2\2\2y\u00af\u00b2")
        buf.write("\u00cc\u00d0\u00d7\u00dd\u00e1\u00e8\u00f0\u00f5\u00f7")
        buf.write("\u00fe\u0102\u010b\u010f\u0117\u011b\u011f\u0128\u0130")
        buf.write("\u0134\u013c\u0141\u0143\u014a\u014f\u015a\u0160\u016f")
        buf.write("\u0183\u0187\u018b\u0193\u019c\u01a1\u01a8\u01ad\u01b2")
        buf.write("\u01b9\u01c0\u01c7\u01d9\u01dd\u01df\u01e6\u01ec\u01f1")
        buf.write("\u0200\u0203\u0208\u020b\u0216\u021a\u021f\u022a\u0230")
        buf.write("\u0238\u023e\u0244\u0248\u024c\u024f\u0254\u025a\u0262")
        buf.write("\u0267\u026c\u0270\u0274\u027e\u0283\u0286\u028b\u0292")
        buf.write("\u0299\u02a2\u02a6\u02ab\u02b0\u02b6\u02ba\u02c9\u02cc")
        buf.write("\u02d1\u02e2\u02e5\u02ee\u02f6\u02fa\u02fc\u0301\u0305")
        buf.write("\u030c\u0313\u0347\u0385\u038d\u0391\u039e\u03a0\u03aa")
        buf.write("\u03b2\u03b6\u03b8\u03be\u03c2\u03c6\u03cb\u03d1\u03d6")
        buf.write("\u03d9\u03dd\u03e8\u03ee\u03f8\u0408\u040f\u0441\u0449")
        return buf.getvalue()


class PrototypeParser ( PrototypeParserBase ):

    grammarFileName = "PrototypeParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'['", "']'", "'('", "')'", "'{'", "<INVALID>", 
                     "'}'", "';'", "','", "'='", "'?'", "'?.'", "':'", "'...'", 
                     "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
                     "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", 
                     "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", 
                     "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", 
                     "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
                     "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", 
                     "'??='", "'=>'", "'null'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", 
                     "'else'", "'new'", "'var'", "'catch'", "'finally'", 
                     "'return'", "'void'", "'continue'", "'for'", "'switch'", 
                     "'while'", "'debugger'", "'function'", "'this'", "'with'", 
                     "'default'", "'if'", "'throw'", "'delete'", "'in'", 
                     "'try'", "'as'", "'from'", "'of'", "'yield'", "'yield*'", 
                     "'class'", "'enum'", "'extends'", "'super'", "'const'", 
                     "'export'", "'import'", "'async'", "'await'", "'implements'", 
                     "<INVALID>", "<INVALID>", "'private'", "'public'", 
                     "'interface'", "'package'", "'protected'", "'static'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'${'" ]

    symbolicNames = [ "<INVALID>", "HashBangLine", "MultiLineComment", "SingleLineComment", 
                      "RegularExpressionLiteral", "OpenBracket", "CloseBracket", 
                      "OpenParen", "CloseParen", "OpenBrace", "TemplateCloseBrace", 
                      "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
                      "QuestionMarkDot", "Colon", "Ellipsis", "Dot", "PlusPlus", 
                      "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
                      "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
                      "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", 
                      "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                      "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                      "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                      "BitOrAssign", "PowerAssign", "NullishCoalescingAssign", 
                      "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
                      "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
                      "BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                      "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                      "Break", "Do", "Instanceof", "Typeof", "Case", "Else", 
                      "New", "Var", "Catch", "Finally", "Return", "Void", 
                      "Continue", "For", "Switch", "While", "Debugger", 
                      "Function_", "This", "With", "Default", "If", "Throw", 
                      "Delete", "In", "Try", "As", "From", "Of", "Yield", 
                      "YieldStar", "Class", "Enum", "Extends", "Super", 
                      "Const", "Export", "Import", "Async", "Await", "Implements", 
                      "StrictLet", "NonStrictLet", "Private", "Public", 
                      "Interface", "Package", "Protected", "Static", "Identifier", 
                      "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator", 
                      "HtmlComment", "CDataComment", "UnexpectedCharacter", 
                      "TemplateStringStartExpression", "TemplateStringAtom" ]

    RULE_program = 0
    RULE_sourceElement = 1
    RULE_statement = 2
    RULE_block = 3
    RULE_statementList = 4
    RULE_importStatement = 5
    RULE_importFromBlock = 6
    RULE_importModuleItems = 7
    RULE_importAliasName = 8
    RULE_moduleExportName = 9
    RULE_importedBinding = 10
    RULE_importDefault = 11
    RULE_importNamespace = 12
    RULE_importFrom = 13
    RULE_aliasName = 14
    RULE_exportStatement = 15
    RULE_exportFromBlock = 16
    RULE_exportModuleItems = 17
    RULE_exportAliasName = 18
    RULE_declaration = 19
    RULE_variableStatement = 20
    RULE_variableDeclarationList = 21
    RULE_variableDeclaration = 22
    RULE_emptyStatement_ = 23
    RULE_expressionStatement = 24
    RULE_ifStatement = 25
    RULE_iterationStatement = 26
    RULE_varModifier = 27
    RULE_continueStatement = 28
    RULE_breakStatement = 29
    RULE_returnStatement = 30
    RULE_yieldStatement = 31
    RULE_withStatement = 32
    RULE_switchStatement = 33
    RULE_caseBlock = 34
    RULE_caseClauses = 35
    RULE_caseClause = 36
    RULE_defaultClause = 37
    RULE_labelledStatement = 38
    RULE_throwStatement = 39
    RULE_tryStatement = 40
    RULE_catchProduction = 41
    RULE_finallyProduction = 42
    RULE_debuggerStatement = 43
    RULE_functionDeclaration = 44
    RULE_classDeclaration = 45
    RULE_classTail = 46
    RULE_classElement = 47
    RULE_methodDefinition = 48
    RULE_fieldDefinition = 49
    RULE_classElementName = 50
    RULE_privateIdentifier = 51
    RULE_formalParameterList = 52
    RULE_formalParameterArg = 53
    RULE_lastFormalParameterArg = 54
    RULE_functionBody = 55
    RULE_sourceElements = 56
    RULE_arrayLiteral = 57
    RULE_elementList = 58
    RULE_arrayElement = 59
    RULE_propertyAssignment = 60
    RULE_propertyName = 61
    RULE_arguments = 62
    RULE_argument = 63
    RULE_expressionSequence = 64
    RULE_singleExpression = 65
    RULE_initializer = 66
    RULE_assignable = 67
    RULE_objectLiteral = 68
    RULE_anonymousFunction = 69
    RULE_arrowFunctionParameters = 70
    RULE_arrowFunctionBody = 71
    RULE_assignmentOperator = 72
    RULE_literal = 73
    RULE_templateStringLiteral = 74
    RULE_templateStringAtom = 75
    RULE_numericLiteral = 76
    RULE_bigintLiteral = 77
    RULE_getter = 78
    RULE_setter = 79
    RULE_identifierName = 80
    RULE_identifier = 81
    RULE_reservedWord = 82
    RULE_keyword = 83
    RULE_let_ = 84
    RULE_eos = 85

    ruleNames =  [ "program", "sourceElement", "statement", "block", "statementList", 
                   "importStatement", "importFromBlock", "importModuleItems", 
                   "importAliasName", "moduleExportName", "importedBinding", 
                   "importDefault", "importNamespace", "importFrom", "aliasName", 
                   "exportStatement", "exportFromBlock", "exportModuleItems", 
                   "exportAliasName", "declaration", "variableStatement", 
                   "variableDeclarationList", "variableDeclaration", "emptyStatement_", 
                   "expressionStatement", "ifStatement", "iterationStatement", 
                   "varModifier", "continueStatement", "breakStatement", 
                   "returnStatement", "yieldStatement", "withStatement", 
                   "switchStatement", "caseBlock", "caseClauses", "caseClause", 
                   "defaultClause", "labelledStatement", "throwStatement", 
                   "tryStatement", "catchProduction", "finallyProduction", 
                   "debuggerStatement", "functionDeclaration", "classDeclaration", 
                   "classTail", "classElement", "methodDefinition", "fieldDefinition", 
                   "classElementName", "privateIdentifier", "formalParameterList", 
                   "formalParameterArg", "lastFormalParameterArg", "functionBody", 
                   "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
                   "propertyAssignment", "propertyName", "arguments", "argument", 
                   "expressionSequence", "singleExpression", "initializer", 
                   "assignable", "objectLiteral", "anonymousFunction", "arrowFunctionParameters", 
                   "arrowFunctionBody", "assignmentOperator", "literal", 
                   "templateStringLiteral", "templateStringAtom", "numericLiteral", 
                   "bigintLiteral", "getter", "setter", "identifierName", 
                   "identifier", "reservedWord", "keyword", "let_", "eos" ]

    EOF = Token.EOF
    HashBangLine=1
    MultiLineComment=2
    SingleLineComment=3
    RegularExpressionLiteral=4
    OpenBracket=5
    CloseBracket=6
    OpenParen=7
    CloseParen=8
    OpenBrace=9
    TemplateCloseBrace=10
    CloseBrace=11
    SemiColon=12
    Comma=13
    Assign=14
    QuestionMark=15
    QuestionMarkDot=16
    Colon=17
    Ellipsis=18
    Dot=19
    PlusPlus=20
    MinusMinus=21
    Plus=22
    Minus=23
    BitNot=24
    Not=25
    Multiply=26
    Divide=27
    Modulus=28
    Power=29
    NullCoalesce=30
    Hashtag=31
    RightShiftArithmetic=32
    LeftShiftArithmetic=33
    RightShiftLogical=34
    LessThan=35
    MoreThan=36
    LessThanEquals=37
    GreaterThanEquals=38
    Equals_=39
    NotEquals=40
    IdentityEquals=41
    IdentityNotEquals=42
    BitAnd=43
    BitXOr=44
    BitOr=45
    And=46
    Or=47
    MultiplyAssign=48
    DivideAssign=49
    ModulusAssign=50
    PlusAssign=51
    MinusAssign=52
    LeftShiftArithmeticAssign=53
    RightShiftArithmeticAssign=54
    RightShiftLogicalAssign=55
    BitAndAssign=56
    BitXorAssign=57
    BitOrAssign=58
    PowerAssign=59
    NullishCoalescingAssign=60
    ARROW=61
    NullLiteral=62
    BooleanLiteral=63
    DecimalLiteral=64
    HexIntegerLiteral=65
    OctalIntegerLiteral=66
    OctalIntegerLiteral2=67
    BinaryIntegerLiteral=68
    BigHexIntegerLiteral=69
    BigOctalIntegerLiteral=70
    BigBinaryIntegerLiteral=71
    BigDecimalIntegerLiteral=72
    Break=73
    Do=74
    Instanceof=75
    Typeof=76
    Case=77
    Else=78
    New=79
    Var=80
    Catch=81
    Finally=82
    Return=83
    Void=84
    Continue=85
    For=86
    Switch=87
    While=88
    Debugger=89
    Function_=90
    This=91
    With=92
    Default=93
    If=94
    Throw=95
    Delete=96
    In=97
    Try=98
    As=99
    From=100
    Of=101
    Yield=102
    YieldStar=103
    Class=104
    Enum=105
    Extends=106
    Super=107
    Const=108
    Export=109
    Import=110
    Async=111
    Await=112
    Implements=113
    StrictLet=114
    NonStrictLet=115
    Private=116
    Public=117
    Interface=118
    Package=119
    Protected=120
    Static=121
    Identifier=122
    StringLiteral=123
    BackTick=124
    WhiteSpaces=125
    LineTerminator=126
    HtmlComment=127
    CDataComment=128
    UnexpectedCharacter=129
    TemplateStringStartExpression=130
    TemplateStringAtom=131

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PrototypeParser.EOF, 0)

        def HashBangLine(self):
            return self.getToken(PrototypeParser.HashBangLine, 0)

        def sourceElements(self):
            return self.getTypedRuleContext(PrototypeParser.SourceElementsContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = PrototypeParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 172
                self.match(PrototypeParser.HashBangLine)


            self.state = 176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 175
                self.sourceElements()


            self.state = 178
            self.match(PrototypeParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PrototypeParser.StatementContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_sourceElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceElement" ):
                listener.enterSourceElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceElement" ):
                listener.exitSourceElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceElement" ):
                return visitor.visitSourceElement(self)
            else:
                return visitor.visitChildren(self)




    def sourceElement(self):

        localctx = PrototypeParser.SourceElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sourceElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(PrototypeParser.BlockContext,0)


        def variableStatement(self):
            return self.getTypedRuleContext(PrototypeParser.VariableStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(PrototypeParser.ImportStatementContext,0)


        def exportStatement(self):
            return self.getTypedRuleContext(PrototypeParser.ExportStatementContext,0)


        def emptyStatement_(self):
            return self.getTypedRuleContext(PrototypeParser.EmptyStatement_Context,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PrototypeParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionDeclarationContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(PrototypeParser.IfStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(PrototypeParser.IterationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(PrototypeParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(PrototypeParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(PrototypeParser.ReturnStatementContext,0)


        def yieldStatement(self):
            return self.getTypedRuleContext(PrototypeParser.YieldStatementContext,0)


        def withStatement(self):
            return self.getTypedRuleContext(PrototypeParser.WithStatementContext,0)


        def labelledStatement(self):
            return self.getTypedRuleContext(PrototypeParser.LabelledStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(PrototypeParser.SwitchStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(PrototypeParser.ThrowStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(PrototypeParser.TryStatementContext,0)


        def debuggerStatement(self):
            return self.getTypedRuleContext(PrototypeParser.DebuggerStatementContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = PrototypeParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 183
                self.variableStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 184
                self.importStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 185
                self.exportStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 186
                self.emptyStatement_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 187
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 188
                self.functionDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 189
                self.expressionStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 190
                self.ifStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 191
                self.iterationStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 192
                self.continueStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 193
                self.breakStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 194
                self.returnStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 195
                self.yieldStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 196
                self.withStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 197
                self.labelledStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 198
                self.switchStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 199
                self.throwStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 200
                self.tryStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 201
                self.debuggerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(PrototypeParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(PrototypeParser.CloseBrace, 0)

        def statementList(self):
            return self.getTypedRuleContext(PrototypeParser.StatementListContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = PrototypeParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(PrototypeParser.OpenBrace)
            self.state = 206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 205
                self.statementList()


            self.state = 208
            self.match(PrototypeParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.StatementContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.StatementContext,i)


        def getRuleIndex(self):
            return PrototypeParser.RULE_statementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementList" ):
                listener.enterStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementList" ):
                listener.exitStatementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementList" ):
                return visitor.visitStatementList(self)
            else:
                return visitor.visitChildren(self)




    def statementList(self):

        localctx = PrototypeParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 210
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 213 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(PrototypeParser.Import, 0)

        def importFromBlock(self):
            return self.getTypedRuleContext(PrototypeParser.ImportFromBlockContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportStatement" ):
                return visitor.visitImportStatement(self)
            else:
                return visitor.visitChildren(self)




    def importStatement(self):

        localctx = PrototypeParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(PrototypeParser.Import)
            self.state = 216
            self.importFromBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportFromBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importFrom(self):
            return self.getTypedRuleContext(PrototypeParser.ImportFromContext,0)


        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def importNamespace(self):
            return self.getTypedRuleContext(PrototypeParser.ImportNamespaceContext,0)


        def importModuleItems(self):
            return self.getTypedRuleContext(PrototypeParser.ImportModuleItemsContext,0)


        def importDefault(self):
            return self.getTypedRuleContext(PrototypeParser.ImportDefaultContext,0)


        def StringLiteral(self):
            return self.getToken(PrototypeParser.StringLiteral, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_importFromBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportFromBlock" ):
                listener.enterImportFromBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportFromBlock" ):
                listener.exitImportFromBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportFromBlock" ):
                return visitor.visitImportFromBlock(self)
            else:
                return visitor.visitChildren(self)




    def importFromBlock(self):

        localctx = PrototypeParser.ImportFromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importFromBlock)
        try:
            self.state = 230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.OpenBrace, PrototypeParser.Multiply, PrototypeParser.NullLiteral, PrototypeParser.BooleanLiteral, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 218
                    self.importDefault()


                self.state = 223
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PrototypeParser.Multiply, PrototypeParser.NullLiteral, PrototypeParser.BooleanLiteral, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier]:
                    self.state = 221
                    self.importNamespace()
                    pass
                elif token in [PrototypeParser.OpenBrace]:
                    self.state = 222
                    self.importModuleItems()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 225
                self.importFrom()
                self.state = 226
                self.eos()
                pass
            elif token in [PrototypeParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 228
                self.match(PrototypeParser.StringLiteral)
                self.state = 229
                self.eos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportModuleItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(PrototypeParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(PrototypeParser.CloseBrace, 0)

        def importAliasName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.ImportAliasNameContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.ImportAliasNameContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.Comma)
            else:
                return self.getToken(PrototypeParser.Comma, i)

        def getRuleIndex(self):
            return PrototypeParser.RULE_importModuleItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportModuleItems" ):
                listener.enterImportModuleItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportModuleItems" ):
                listener.exitImportModuleItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportModuleItems" ):
                return visitor.visitImportModuleItems(self)
            else:
                return visitor.visitChildren(self)




    def importModuleItems(self):

        localctx = PrototypeParser.ImportModuleItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importModuleItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(PrototypeParser.OpenBrace)
            self.state = 238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 233
                    self.importAliasName()
                    self.state = 234
                    self.match(PrototypeParser.Comma) 
                self.state = 240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (PrototypeParser.NullLiteral - 62)) | (1 << (PrototypeParser.BooleanLiteral - 62)) | (1 << (PrototypeParser.Break - 62)) | (1 << (PrototypeParser.Do - 62)) | (1 << (PrototypeParser.Instanceof - 62)) | (1 << (PrototypeParser.Typeof - 62)) | (1 << (PrototypeParser.Case - 62)) | (1 << (PrototypeParser.Else - 62)) | (1 << (PrototypeParser.New - 62)) | (1 << (PrototypeParser.Var - 62)) | (1 << (PrototypeParser.Catch - 62)) | (1 << (PrototypeParser.Finally - 62)) | (1 << (PrototypeParser.Return - 62)) | (1 << (PrototypeParser.Void - 62)) | (1 << (PrototypeParser.Continue - 62)) | (1 << (PrototypeParser.For - 62)) | (1 << (PrototypeParser.Switch - 62)) | (1 << (PrototypeParser.While - 62)) | (1 << (PrototypeParser.Debugger - 62)) | (1 << (PrototypeParser.Function_ - 62)) | (1 << (PrototypeParser.This - 62)) | (1 << (PrototypeParser.With - 62)) | (1 << (PrototypeParser.Default - 62)) | (1 << (PrototypeParser.If - 62)) | (1 << (PrototypeParser.Throw - 62)) | (1 << (PrototypeParser.Delete - 62)) | (1 << (PrototypeParser.In - 62)) | (1 << (PrototypeParser.Try - 62)) | (1 << (PrototypeParser.As - 62)) | (1 << (PrototypeParser.From - 62)) | (1 << (PrototypeParser.Of - 62)) | (1 << (PrototypeParser.Yield - 62)) | (1 << (PrototypeParser.YieldStar - 62)) | (1 << (PrototypeParser.Class - 62)) | (1 << (PrototypeParser.Enum - 62)) | (1 << (PrototypeParser.Extends - 62)) | (1 << (PrototypeParser.Super - 62)) | (1 << (PrototypeParser.Const - 62)) | (1 << (PrototypeParser.Export - 62)) | (1 << (PrototypeParser.Import - 62)) | (1 << (PrototypeParser.Async - 62)) | (1 << (PrototypeParser.Await - 62)) | (1 << (PrototypeParser.Implements - 62)) | (1 << (PrototypeParser.StrictLet - 62)) | (1 << (PrototypeParser.NonStrictLet - 62)) | (1 << (PrototypeParser.Private - 62)) | (1 << (PrototypeParser.Public - 62)) | (1 << (PrototypeParser.Interface - 62)) | (1 << (PrototypeParser.Package - 62)) | (1 << (PrototypeParser.Protected - 62)) | (1 << (PrototypeParser.Static - 62)) | (1 << (PrototypeParser.Identifier - 62)) | (1 << (PrototypeParser.StringLiteral - 62)))) != 0):
                self.state = 241
                self.importAliasName()
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Comma:
                    self.state = 242
                    self.match(PrototypeParser.Comma)




            self.state = 247
            self.match(PrototypeParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportAliasNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleExportName(self):
            return self.getTypedRuleContext(PrototypeParser.ModuleExportNameContext,0)


        def As(self):
            return self.getToken(PrototypeParser.As, 0)

        def importedBinding(self):
            return self.getTypedRuleContext(PrototypeParser.ImportedBindingContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_importAliasName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAliasName" ):
                listener.enterImportAliasName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAliasName" ):
                listener.exitImportAliasName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportAliasName" ):
                return visitor.visitImportAliasName(self)
            else:
                return visitor.visitChildren(self)




    def importAliasName(self):

        localctx = PrototypeParser.ImportAliasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importAliasName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.moduleExportName()
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.As:
                self.state = 250
                self.match(PrototypeParser.As)
                self.state = 251
                self.importedBinding()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleExportNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierNameContext,0)


        def StringLiteral(self):
            return self.getToken(PrototypeParser.StringLiteral, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_moduleExportName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleExportName" ):
                listener.enterModuleExportName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleExportName" ):
                listener.exitModuleExportName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleExportName" ):
                return visitor.visitModuleExportName(self)
            else:
                return visitor.visitChildren(self)




    def moduleExportName(self):

        localctx = PrototypeParser.ModuleExportNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_moduleExportName)
        try:
            self.state = 256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.NullLiteral, PrototypeParser.BooleanLiteral, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.identifierName()
                pass
            elif token in [PrototypeParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 255
                self.match(PrototypeParser.StringLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportedBindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(PrototypeParser.Identifier, 0)

        def Yield(self):
            return self.getToken(PrototypeParser.Yield, 0)

        def Await(self):
            return self.getToken(PrototypeParser.Await, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_importedBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportedBinding" ):
                listener.enterImportedBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportedBinding" ):
                listener.exitImportedBinding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportedBinding" ):
                return visitor.visitImportedBinding(self)
            else:
                return visitor.visitChildren(self)




    def importedBinding(self):

        localctx = PrototypeParser.ImportedBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_importedBinding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (PrototypeParser.Yield - 102)) | (1 << (PrototypeParser.Await - 102)) | (1 << (PrototypeParser.Identifier - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasName(self):
            return self.getTypedRuleContext(PrototypeParser.AliasNameContext,0)


        def Comma(self):
            return self.getToken(PrototypeParser.Comma, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_importDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDefault" ):
                listener.enterImportDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDefault" ):
                listener.exitImportDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDefault" ):
                return visitor.visitImportDefault(self)
            else:
                return visitor.visitChildren(self)




    def importDefault(self):

        localctx = PrototypeParser.ImportDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_importDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.aliasName()
            self.state = 261
            self.match(PrototypeParser.Comma)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportNamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Multiply(self):
            return self.getToken(PrototypeParser.Multiply, 0)

        def identifierName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.IdentifierNameContext,i)


        def As(self):
            return self.getToken(PrototypeParser.As, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_importNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportNamespace" ):
                listener.enterImportNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportNamespace" ):
                listener.exitImportNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportNamespace" ):
                return visitor.visitImportNamespace(self)
            else:
                return visitor.visitChildren(self)




    def importNamespace(self):

        localctx = PrototypeParser.ImportNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_importNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.Multiply]:
                self.state = 263
                self.match(PrototypeParser.Multiply)
                pass
            elif token in [PrototypeParser.NullLiteral, PrototypeParser.BooleanLiteral, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier]:
                self.state = 264
                self.identifierName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.As:
                self.state = 267
                self.match(PrototypeParser.As)
                self.state = 268
                self.identifierName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportFromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def From(self):
            return self.getToken(PrototypeParser.From, 0)

        def StringLiteral(self):
            return self.getToken(PrototypeParser.StringLiteral, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_importFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportFrom" ):
                listener.enterImportFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportFrom" ):
                listener.exitImportFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportFrom" ):
                return visitor.visitImportFrom(self)
            else:
                return visitor.visitChildren(self)




    def importFrom(self):

        localctx = PrototypeParser.ImportFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_importFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(PrototypeParser.From)
            self.state = 272
            self.match(PrototypeParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.IdentifierNameContext,i)


        def As(self):
            return self.getToken(PrototypeParser.As, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_aliasName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasName" ):
                listener.enterAliasName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasName" ):
                listener.exitAliasName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasName" ):
                return visitor.visitAliasName(self)
            else:
                return visitor.visitChildren(self)




    def aliasName(self):

        localctx = PrototypeParser.AliasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_aliasName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.identifierName()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.As:
                self.state = 275
                self.match(PrototypeParser.As)
                self.state = 276
                self.identifierName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrototypeParser.RULE_exportStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExportDefaultDeclarationContext(ExportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.ExportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Export(self):
            return self.getToken(PrototypeParser.Export, 0)
        def Default(self):
            return self.getToken(PrototypeParser.Default, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportDefaultDeclaration" ):
                listener.enterExportDefaultDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportDefaultDeclaration" ):
                listener.exitExportDefaultDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportDefaultDeclaration" ):
                return visitor.visitExportDefaultDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class ExportDeclarationContext(ExportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.ExportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Export(self):
            return self.getToken(PrototypeParser.Export, 0)
        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)

        def exportFromBlock(self):
            return self.getTypedRuleContext(PrototypeParser.ExportFromBlockContext,0)

        def declaration(self):
            return self.getTypedRuleContext(PrototypeParser.DeclarationContext,0)

        def Default(self):
            return self.getToken(PrototypeParser.Default, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportDeclaration" ):
                listener.enterExportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportDeclaration" ):
                listener.exitExportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportDeclaration" ):
                return visitor.visitExportDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def exportStatement(self):

        localctx = PrototypeParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_exportStatement)
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                localctx = PrototypeParser.ExportDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.match(PrototypeParser.Export)
                self.state = 281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 280
                    self.match(PrototypeParser.Default)


                self.state = 285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 283
                    self.exportFromBlock()
                    pass

                elif la_ == 2:
                    self.state = 284
                    self.declaration()
                    pass


                self.state = 287
                self.eos()
                pass

            elif la_ == 2:
                localctx = PrototypeParser.ExportDefaultDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.match(PrototypeParser.Export)
                self.state = 290
                self.match(PrototypeParser.Default)
                self.state = 291
                self.singleExpression(0)
                self.state = 292
                self.eos()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportFromBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importNamespace(self):
            return self.getTypedRuleContext(PrototypeParser.ImportNamespaceContext,0)


        def importFrom(self):
            return self.getTypedRuleContext(PrototypeParser.ImportFromContext,0)


        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def exportModuleItems(self):
            return self.getTypedRuleContext(PrototypeParser.ExportModuleItemsContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_exportFromBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportFromBlock" ):
                listener.enterExportFromBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportFromBlock" ):
                listener.exitExportFromBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportFromBlock" ):
                return visitor.visitExportFromBlock(self)
            else:
                return visitor.visitChildren(self)




    def exportFromBlock(self):

        localctx = PrototypeParser.ExportFromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exportFromBlock)
        try:
            self.state = 306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.Multiply, PrototypeParser.NullLiteral, PrototypeParser.BooleanLiteral, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.importNamespace()
                self.state = 297
                self.importFrom()
                self.state = 298
                self.eos()
                pass
            elif token in [PrototypeParser.OpenBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 300
                self.exportModuleItems()
                self.state = 302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 301
                    self.importFrom()


                self.state = 304
                self.eos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportModuleItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(PrototypeParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(PrototypeParser.CloseBrace, 0)

        def exportAliasName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.ExportAliasNameContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.ExportAliasNameContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.Comma)
            else:
                return self.getToken(PrototypeParser.Comma, i)

        def getRuleIndex(self):
            return PrototypeParser.RULE_exportModuleItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportModuleItems" ):
                listener.enterExportModuleItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportModuleItems" ):
                listener.exitExportModuleItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportModuleItems" ):
                return visitor.visitExportModuleItems(self)
            else:
                return visitor.visitChildren(self)




    def exportModuleItems(self):

        localctx = PrototypeParser.ExportModuleItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_exportModuleItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(PrototypeParser.OpenBrace)
            self.state = 314
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 309
                    self.exportAliasName()
                    self.state = 310
                    self.match(PrototypeParser.Comma) 
                self.state = 316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (PrototypeParser.NullLiteral - 62)) | (1 << (PrototypeParser.BooleanLiteral - 62)) | (1 << (PrototypeParser.Break - 62)) | (1 << (PrototypeParser.Do - 62)) | (1 << (PrototypeParser.Instanceof - 62)) | (1 << (PrototypeParser.Typeof - 62)) | (1 << (PrototypeParser.Case - 62)) | (1 << (PrototypeParser.Else - 62)) | (1 << (PrototypeParser.New - 62)) | (1 << (PrototypeParser.Var - 62)) | (1 << (PrototypeParser.Catch - 62)) | (1 << (PrototypeParser.Finally - 62)) | (1 << (PrototypeParser.Return - 62)) | (1 << (PrototypeParser.Void - 62)) | (1 << (PrototypeParser.Continue - 62)) | (1 << (PrototypeParser.For - 62)) | (1 << (PrototypeParser.Switch - 62)) | (1 << (PrototypeParser.While - 62)) | (1 << (PrototypeParser.Debugger - 62)) | (1 << (PrototypeParser.Function_ - 62)) | (1 << (PrototypeParser.This - 62)) | (1 << (PrototypeParser.With - 62)) | (1 << (PrototypeParser.Default - 62)) | (1 << (PrototypeParser.If - 62)) | (1 << (PrototypeParser.Throw - 62)) | (1 << (PrototypeParser.Delete - 62)) | (1 << (PrototypeParser.In - 62)) | (1 << (PrototypeParser.Try - 62)) | (1 << (PrototypeParser.As - 62)) | (1 << (PrototypeParser.From - 62)) | (1 << (PrototypeParser.Of - 62)) | (1 << (PrototypeParser.Yield - 62)) | (1 << (PrototypeParser.YieldStar - 62)) | (1 << (PrototypeParser.Class - 62)) | (1 << (PrototypeParser.Enum - 62)) | (1 << (PrototypeParser.Extends - 62)) | (1 << (PrototypeParser.Super - 62)) | (1 << (PrototypeParser.Const - 62)) | (1 << (PrototypeParser.Export - 62)) | (1 << (PrototypeParser.Import - 62)) | (1 << (PrototypeParser.Async - 62)) | (1 << (PrototypeParser.Await - 62)) | (1 << (PrototypeParser.Implements - 62)) | (1 << (PrototypeParser.StrictLet - 62)) | (1 << (PrototypeParser.NonStrictLet - 62)) | (1 << (PrototypeParser.Private - 62)) | (1 << (PrototypeParser.Public - 62)) | (1 << (PrototypeParser.Interface - 62)) | (1 << (PrototypeParser.Package - 62)) | (1 << (PrototypeParser.Protected - 62)) | (1 << (PrototypeParser.Static - 62)) | (1 << (PrototypeParser.Identifier - 62)) | (1 << (PrototypeParser.StringLiteral - 62)))) != 0):
                self.state = 317
                self.exportAliasName()
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Comma:
                    self.state = 318
                    self.match(PrototypeParser.Comma)




            self.state = 323
            self.match(PrototypeParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExportAliasNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleExportName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.ModuleExportNameContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.ModuleExportNameContext,i)


        def As(self):
            return self.getToken(PrototypeParser.As, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_exportAliasName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportAliasName" ):
                listener.enterExportAliasName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportAliasName" ):
                listener.exitExportAliasName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportAliasName" ):
                return visitor.visitExportAliasName(self)
            else:
                return visitor.visitChildren(self)




    def exportAliasName(self):

        localctx = PrototypeParser.ExportAliasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_exportAliasName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.moduleExportName()
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.As:
                self.state = 326
                self.match(PrototypeParser.As)
                self.state = 327
                self.moduleExportName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableStatement(self):
            return self.getTypedRuleContext(PrototypeParser.VariableStatementContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PrototypeParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionDeclarationContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = PrototypeParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_declaration)
        try:
            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.Var, PrototypeParser.Const, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.variableStatement()
                pass
            elif token in [PrototypeParser.Class]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.classDeclaration()
                pass
            elif token in [PrototypeParser.Function_, PrototypeParser.Async]:
                self.enterOuterAlt(localctx, 3)
                self.state = 332
                self.functionDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationList(self):
            return self.getTypedRuleContext(PrototypeParser.VariableDeclarationListContext,0)


        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_variableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStatement" ):
                listener.enterVariableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStatement" ):
                listener.exitVariableStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableStatement" ):
                return visitor.visitVariableStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableStatement(self):

        localctx = PrototypeParser.VariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_variableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.variableDeclarationList()
            self.state = 336
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varModifier(self):
            return self.getTypedRuleContext(PrototypeParser.VarModifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.VariableDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.Comma)
            else:
                return self.getToken(PrototypeParser.Comma, i)

        def getRuleIndex(self):
            return PrototypeParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = PrototypeParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_variableDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.varModifier()
            self.state = 339
            self.variableDeclaration()
            self.state = 344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 340
                    self.match(PrototypeParser.Comma)
                    self.state = 341
                    self.variableDeclaration() 
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(PrototypeParser.AssignableContext,0)


        def Assign(self):
            return self.getToken(PrototypeParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = PrototypeParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.assignable()
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 348
                self.match(PrototypeParser.Assign)
                self.state = 349
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyStatement_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PrototypeParser.SemiColon, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_emptyStatement_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement_" ):
                listener.enterEmptyStatement_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement_" ):
                listener.exitEmptyStatement_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement_" ):
                return visitor.visitEmptyStatement_(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement_(self):

        localctx = PrototypeParser.EmptyStatement_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_emptyStatement_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(PrototypeParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)


        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = PrototypeParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            if not self.notOpenBraceAndNotFunction():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.notOpenBraceAndNotFunction()")
            self.state = 355
            self.expressionSequence()
            self.state = 356
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(PrototypeParser.If, 0)

        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.StatementContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.StatementContext,i)


        def Else(self):
            return self.getToken(PrototypeParser.Else, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = PrototypeParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(PrototypeParser.If)
            self.state = 359
            self.match(PrototypeParser.OpenParen)
            self.state = 360
            self.expressionSequence()
            self.state = 361
            self.match(PrototypeParser.CloseParen)
            self.state = 362
            self.statement()
            self.state = 365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 363
                self.match(PrototypeParser.Else)
                self.state = 364
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrototypeParser.RULE_iterationStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DoStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(PrototypeParser.Do, 0)
        def statement(self):
            return self.getTypedRuleContext(PrototypeParser.StatementContext,0)

        def While(self):
            return self.getToken(PrototypeParser.While, 0)
        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)


    class WhileStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(PrototypeParser.While, 0)
        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(PrototypeParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(PrototypeParser.For, 0)
        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.SemiColon)
            else:
                return self.getToken(PrototypeParser.SemiColon, i)
        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(PrototypeParser.StatementContext,0)

        def expressionSequence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.ExpressionSequenceContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,i)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(PrototypeParser.VariableDeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForInStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(PrototypeParser.For, 0)
        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def In(self):
            return self.getToken(PrototypeParser.In, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(PrototypeParser.StatementContext,0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(PrototypeParser.VariableDeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInStatement" ):
                listener.enterForInStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInStatement" ):
                listener.exitForInStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInStatement" ):
                return visitor.visitForInStatement(self)
            else:
                return visitor.visitChildren(self)


    class ForOfStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(PrototypeParser.For, 0)
        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def Of(self):
            return self.getToken(PrototypeParser.Of, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(PrototypeParser.StatementContext,0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(PrototypeParser.VariableDeclarationListContext,0)

        def Await(self):
            return self.getToken(PrototypeParser.Await, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForOfStatement" ):
                listener.enterForOfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForOfStatement" ):
                listener.exitForOfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForOfStatement" ):
                return visitor.visitForOfStatement(self)
            else:
                return visitor.visitChildren(self)



    def iterationStatement(self):

        localctx = PrototypeParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                localctx = PrototypeParser.DoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                self.match(PrototypeParser.Do)
                self.state = 368
                self.statement()
                self.state = 369
                self.match(PrototypeParser.While)
                self.state = 370
                self.match(PrototypeParser.OpenParen)
                self.state = 371
                self.expressionSequence()
                self.state = 372
                self.match(PrototypeParser.CloseParen)
                self.state = 373
                self.eos()
                pass

            elif la_ == 2:
                localctx = PrototypeParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.match(PrototypeParser.While)
                self.state = 376
                self.match(PrototypeParser.OpenParen)
                self.state = 377
                self.expressionSequence()
                self.state = 378
                self.match(PrototypeParser.CloseParen)
                self.state = 379
                self.statement()
                pass

            elif la_ == 3:
                localctx = PrototypeParser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 381
                self.match(PrototypeParser.For)
                self.state = 382
                self.match(PrototypeParser.OpenParen)
                self.state = 385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 383
                    self.expressionSequence()

                elif la_ == 2:
                    self.state = 384
                    self.variableDeclarationList()


                self.state = 387
                self.match(PrototypeParser.SemiColon)
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.RegularExpressionLiteral) | (1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenParen) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.PlusPlus) | (1 << PrototypeParser.MinusMinus) | (1 << PrototypeParser.Plus) | (1 << PrototypeParser.Minus) | (1 << PrototypeParser.BitNot) | (1 << PrototypeParser.Not) | (1 << PrototypeParser.NullLiteral) | (1 << PrototypeParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrototypeParser.DecimalLiteral - 64)) | (1 << (PrototypeParser.HexIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral2 - 64)) | (1 << (PrototypeParser.BinaryIntegerLiteral - 64)) | (1 << (PrototypeParser.BigHexIntegerLiteral - 64)) | (1 << (PrototypeParser.BigOctalIntegerLiteral - 64)) | (1 << (PrototypeParser.BigBinaryIntegerLiteral - 64)) | (1 << (PrototypeParser.BigDecimalIntegerLiteral - 64)) | (1 << (PrototypeParser.Break - 64)) | (1 << (PrototypeParser.Do - 64)) | (1 << (PrototypeParser.Instanceof - 64)) | (1 << (PrototypeParser.Typeof - 64)) | (1 << (PrototypeParser.Case - 64)) | (1 << (PrototypeParser.Else - 64)) | (1 << (PrototypeParser.New - 64)) | (1 << (PrototypeParser.Var - 64)) | (1 << (PrototypeParser.Catch - 64)) | (1 << (PrototypeParser.Finally - 64)) | (1 << (PrototypeParser.Return - 64)) | (1 << (PrototypeParser.Void - 64)) | (1 << (PrototypeParser.Continue - 64)) | (1 << (PrototypeParser.For - 64)) | (1 << (PrototypeParser.Switch - 64)) | (1 << (PrototypeParser.While - 64)) | (1 << (PrototypeParser.Debugger - 64)) | (1 << (PrototypeParser.Function_ - 64)) | (1 << (PrototypeParser.This - 64)) | (1 << (PrototypeParser.With - 64)) | (1 << (PrototypeParser.Default - 64)) | (1 << (PrototypeParser.If - 64)) | (1 << (PrototypeParser.Throw - 64)) | (1 << (PrototypeParser.Delete - 64)) | (1 << (PrototypeParser.In - 64)) | (1 << (PrototypeParser.Try - 64)) | (1 << (PrototypeParser.As - 64)) | (1 << (PrototypeParser.From - 64)) | (1 << (PrototypeParser.Of - 64)) | (1 << (PrototypeParser.Yield - 64)) | (1 << (PrototypeParser.YieldStar - 64)) | (1 << (PrototypeParser.Class - 64)) | (1 << (PrototypeParser.Enum - 64)) | (1 << (PrototypeParser.Extends - 64)) | (1 << (PrototypeParser.Super - 64)) | (1 << (PrototypeParser.Const - 64)) | (1 << (PrototypeParser.Export - 64)) | (1 << (PrototypeParser.Import - 64)) | (1 << (PrototypeParser.Async - 64)) | (1 << (PrototypeParser.Await - 64)) | (1 << (PrototypeParser.Implements - 64)) | (1 << (PrototypeParser.StrictLet - 64)) | (1 << (PrototypeParser.NonStrictLet - 64)) | (1 << (PrototypeParser.Private - 64)) | (1 << (PrototypeParser.Public - 64)) | (1 << (PrototypeParser.Interface - 64)) | (1 << (PrototypeParser.Package - 64)) | (1 << (PrototypeParser.Protected - 64)) | (1 << (PrototypeParser.Static - 64)) | (1 << (PrototypeParser.Identifier - 64)) | (1 << (PrototypeParser.StringLiteral - 64)) | (1 << (PrototypeParser.BackTick - 64)))) != 0):
                    self.state = 388
                    self.expressionSequence()


                self.state = 391
                self.match(PrototypeParser.SemiColon)
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.RegularExpressionLiteral) | (1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenParen) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.PlusPlus) | (1 << PrototypeParser.MinusMinus) | (1 << PrototypeParser.Plus) | (1 << PrototypeParser.Minus) | (1 << PrototypeParser.BitNot) | (1 << PrototypeParser.Not) | (1 << PrototypeParser.NullLiteral) | (1 << PrototypeParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrototypeParser.DecimalLiteral - 64)) | (1 << (PrototypeParser.HexIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral2 - 64)) | (1 << (PrototypeParser.BinaryIntegerLiteral - 64)) | (1 << (PrototypeParser.BigHexIntegerLiteral - 64)) | (1 << (PrototypeParser.BigOctalIntegerLiteral - 64)) | (1 << (PrototypeParser.BigBinaryIntegerLiteral - 64)) | (1 << (PrototypeParser.BigDecimalIntegerLiteral - 64)) | (1 << (PrototypeParser.Break - 64)) | (1 << (PrototypeParser.Do - 64)) | (1 << (PrototypeParser.Instanceof - 64)) | (1 << (PrototypeParser.Typeof - 64)) | (1 << (PrototypeParser.Case - 64)) | (1 << (PrototypeParser.Else - 64)) | (1 << (PrototypeParser.New - 64)) | (1 << (PrototypeParser.Var - 64)) | (1 << (PrototypeParser.Catch - 64)) | (1 << (PrototypeParser.Finally - 64)) | (1 << (PrototypeParser.Return - 64)) | (1 << (PrototypeParser.Void - 64)) | (1 << (PrototypeParser.Continue - 64)) | (1 << (PrototypeParser.For - 64)) | (1 << (PrototypeParser.Switch - 64)) | (1 << (PrototypeParser.While - 64)) | (1 << (PrototypeParser.Debugger - 64)) | (1 << (PrototypeParser.Function_ - 64)) | (1 << (PrototypeParser.This - 64)) | (1 << (PrototypeParser.With - 64)) | (1 << (PrototypeParser.Default - 64)) | (1 << (PrototypeParser.If - 64)) | (1 << (PrototypeParser.Throw - 64)) | (1 << (PrototypeParser.Delete - 64)) | (1 << (PrototypeParser.In - 64)) | (1 << (PrototypeParser.Try - 64)) | (1 << (PrototypeParser.As - 64)) | (1 << (PrototypeParser.From - 64)) | (1 << (PrototypeParser.Of - 64)) | (1 << (PrototypeParser.Yield - 64)) | (1 << (PrototypeParser.YieldStar - 64)) | (1 << (PrototypeParser.Class - 64)) | (1 << (PrototypeParser.Enum - 64)) | (1 << (PrototypeParser.Extends - 64)) | (1 << (PrototypeParser.Super - 64)) | (1 << (PrototypeParser.Const - 64)) | (1 << (PrototypeParser.Export - 64)) | (1 << (PrototypeParser.Import - 64)) | (1 << (PrototypeParser.Async - 64)) | (1 << (PrototypeParser.Await - 64)) | (1 << (PrototypeParser.Implements - 64)) | (1 << (PrototypeParser.StrictLet - 64)) | (1 << (PrototypeParser.NonStrictLet - 64)) | (1 << (PrototypeParser.Private - 64)) | (1 << (PrototypeParser.Public - 64)) | (1 << (PrototypeParser.Interface - 64)) | (1 << (PrototypeParser.Package - 64)) | (1 << (PrototypeParser.Protected - 64)) | (1 << (PrototypeParser.Static - 64)) | (1 << (PrototypeParser.Identifier - 64)) | (1 << (PrototypeParser.StringLiteral - 64)) | (1 << (PrototypeParser.BackTick - 64)))) != 0):
                    self.state = 392
                    self.expressionSequence()


                self.state = 395
                self.match(PrototypeParser.CloseParen)
                self.state = 396
                self.statement()
                pass

            elif la_ == 4:
                localctx = PrototypeParser.ForInStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 397
                self.match(PrototypeParser.For)
                self.state = 398
                self.match(PrototypeParser.OpenParen)
                self.state = 401
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 399
                    self.singleExpression(0)
                    pass

                elif la_ == 2:
                    self.state = 400
                    self.variableDeclarationList()
                    pass


                self.state = 403
                self.match(PrototypeParser.In)
                self.state = 404
                self.expressionSequence()
                self.state = 405
                self.match(PrototypeParser.CloseParen)
                self.state = 406
                self.statement()
                pass

            elif la_ == 5:
                localctx = PrototypeParser.ForOfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 408
                self.match(PrototypeParser.For)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Await:
                    self.state = 409
                    self.match(PrototypeParser.Await)


                self.state = 412
                self.match(PrototypeParser.OpenParen)
                self.state = 415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 413
                    self.singleExpression(0)
                    pass

                elif la_ == 2:
                    self.state = 414
                    self.variableDeclarationList()
                    pass


                self.state = 417
                self.match(PrototypeParser.Of)
                self.state = 418
                self.expressionSequence()
                self.state = 419
                self.match(PrototypeParser.CloseParen)
                self.state = 420
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Var(self):
            return self.getToken(PrototypeParser.Var, 0)

        def let_(self):
            return self.getTypedRuleContext(PrototypeParser.Let_Context,0)


        def Const(self):
            return self.getToken(PrototypeParser.Const, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_varModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarModifier" ):
                listener.enterVarModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarModifier" ):
                listener.exitVarModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarModifier" ):
                return visitor.visitVarModifier(self)
            else:
                return visitor.visitChildren(self)




    def varModifier(self):

        localctx = PrototypeParser.VarModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_varModifier)
        try:
            self.state = 427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.Var]:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.match(PrototypeParser.Var)
                pass
            elif token in [PrototypeParser.StrictLet, PrototypeParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.let_()
                pass
            elif token in [PrototypeParser.Const]:
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.match(PrototypeParser.Const)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(PrototypeParser.Continue, 0)

        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = PrototypeParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(PrototypeParser.Continue)
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 430
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 431
                self.identifier()


            self.state = 434
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(PrototypeParser.Break, 0)

        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = PrototypeParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(PrototypeParser.Break)
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 437
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 438
                self.identifier()


            self.state = 441
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(PrototypeParser.Return, 0)

        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = PrototypeParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(PrototypeParser.Return)
            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 444
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 445
                self.expressionSequence()


            self.state = 448
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def Yield(self):
            return self.getToken(PrototypeParser.Yield, 0)

        def YieldStar(self):
            return self.getToken(PrototypeParser.YieldStar, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_yieldStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldStatement" ):
                return visitor.visitYieldStatement(self)
            else:
                return visitor.visitChildren(self)




    def yieldStatement(self):

        localctx = PrototypeParser.YieldStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_yieldStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            _la = self._input.LA(1)
            if not(_la==PrototypeParser.Yield or _la==PrototypeParser.YieldStar):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 451
                if not self.notLineTerminator():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.notLineTerminator()")
                self.state = 452
                self.expressionSequence()


            self.state = 455
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def With(self):
            return self.getToken(PrototypeParser.With, 0)

        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def statement(self):
            return self.getTypedRuleContext(PrototypeParser.StatementContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_withStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStatement" ):
                listener.enterWithStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStatement" ):
                listener.exitWithStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithStatement" ):
                return visitor.visitWithStatement(self)
            else:
                return visitor.visitChildren(self)




    def withStatement(self):

        localctx = PrototypeParser.WithStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_withStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(PrototypeParser.With)
            self.state = 458
            self.match(PrototypeParser.OpenParen)
            self.state = 459
            self.expressionSequence()
            self.state = 460
            self.match(PrototypeParser.CloseParen)
            self.state = 461
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(PrototypeParser.Switch, 0)

        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def caseBlock(self):
            return self.getTypedRuleContext(PrototypeParser.CaseBlockContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def switchStatement(self):

        localctx = PrototypeParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(PrototypeParser.Switch)
            self.state = 464
            self.match(PrototypeParser.OpenParen)
            self.state = 465
            self.expressionSequence()
            self.state = 466
            self.match(PrototypeParser.CloseParen)
            self.state = 467
            self.caseBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(PrototypeParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(PrototypeParser.CloseBrace, 0)

        def caseClauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.CaseClausesContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.CaseClausesContext,i)


        def defaultClause(self):
            return self.getTypedRuleContext(PrototypeParser.DefaultClauseContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_caseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBlock" ):
                listener.enterCaseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBlock" ):
                listener.exitCaseBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseBlock" ):
                return visitor.visitCaseBlock(self)
            else:
                return visitor.visitChildren(self)




    def caseBlock(self):

        localctx = PrototypeParser.CaseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_caseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(PrototypeParser.OpenBrace)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.Case:
                self.state = 470
                self.caseClauses()


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.Default:
                self.state = 473
                self.defaultClause()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Case:
                    self.state = 474
                    self.caseClauses()




            self.state = 479
            self.match(PrototypeParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseClausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.CaseClauseContext,i)


        def getRuleIndex(self):
            return PrototypeParser.RULE_caseClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClauses" ):
                listener.enterCaseClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClauses" ):
                listener.exitCaseClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClauses" ):
                return visitor.visitCaseClauses(self)
            else:
                return visitor.visitChildren(self)




    def caseClauses(self):

        localctx = PrototypeParser.CaseClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_caseClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 481
                self.caseClause()
                self.state = 484 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PrototypeParser.Case):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(PrototypeParser.Case, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)


        def Colon(self):
            return self.getToken(PrototypeParser.Colon, 0)

        def statementList(self):
            return self.getTypedRuleContext(PrototypeParser.StatementListContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_caseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClause" ):
                listener.enterCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClause" ):
                listener.exitCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClause" ):
                return visitor.visitCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseClause(self):

        localctx = PrototypeParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_caseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(PrototypeParser.Case)
            self.state = 487
            self.expressionSequence()
            self.state = 488
            self.match(PrototypeParser.Colon)
            self.state = 490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 489
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(PrototypeParser.Default, 0)

        def Colon(self):
            return self.getToken(PrototypeParser.Colon, 0)

        def statementList(self):
            return self.getTypedRuleContext(PrototypeParser.StatementListContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_defaultClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultClause" ):
                listener.enterDefaultClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultClause" ):
                listener.exitDefaultClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultClause" ):
                return visitor.visitDefaultClause(self)
            else:
                return visitor.visitChildren(self)




    def defaultClause(self):

        localctx = PrototypeParser.DefaultClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_defaultClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(PrototypeParser.Default)
            self.state = 493
            self.match(PrototypeParser.Colon)
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 494
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PrototypeParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(PrototypeParser.StatementContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_labelledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelledStatement" ):
                listener.enterLabelledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelledStatement" ):
                listener.exitLabelledStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelledStatement" ):
                return visitor.visitLabelledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labelledStatement(self):

        localctx = PrototypeParser.LabelledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_labelledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.identifier()
            self.state = 498
            self.match(PrototypeParser.Colon)
            self.state = 499
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(PrototypeParser.Throw, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)


        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = PrototypeParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(PrototypeParser.Throw)
            self.state = 502
            if not self.notLineTerminator():
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.notLineTerminator()")
            self.state = 503
            self.expressionSequence()
            self.state = 504
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(PrototypeParser.Try, 0)

        def block(self):
            return self.getTypedRuleContext(PrototypeParser.BlockContext,0)


        def catchProduction(self):
            return self.getTypedRuleContext(PrototypeParser.CatchProductionContext,0)


        def finallyProduction(self):
            return self.getTypedRuleContext(PrototypeParser.FinallyProductionContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = PrototypeParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(PrototypeParser.Try)
            self.state = 507
            self.block()
            self.state = 513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.Catch]:
                self.state = 508
                self.catchProduction()
                self.state = 510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 509
                    self.finallyProduction()


                pass
            elif token in [PrototypeParser.Finally]:
                self.state = 512
                self.finallyProduction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(PrototypeParser.Catch, 0)

        def block(self):
            return self.getTypedRuleContext(PrototypeParser.BlockContext,0)


        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def assignable(self):
            return self.getTypedRuleContext(PrototypeParser.AssignableContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_catchProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchProduction" ):
                listener.enterCatchProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchProduction" ):
                listener.exitCatchProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchProduction" ):
                return visitor.visitCatchProduction(self)
            else:
                return visitor.visitChildren(self)




    def catchProduction(self):

        localctx = PrototypeParser.CatchProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_catchProduction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(PrototypeParser.Catch)
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.OpenParen:
                self.state = 516
                self.match(PrototypeParser.OpenParen)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.OpenBracket or _la==PrototypeParser.OpenBrace or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (PrototypeParser.Break - 73)) | (1 << (PrototypeParser.Do - 73)) | (1 << (PrototypeParser.Instanceof - 73)) | (1 << (PrototypeParser.Typeof - 73)) | (1 << (PrototypeParser.Case - 73)) | (1 << (PrototypeParser.Else - 73)) | (1 << (PrototypeParser.New - 73)) | (1 << (PrototypeParser.Var - 73)) | (1 << (PrototypeParser.Catch - 73)) | (1 << (PrototypeParser.Finally - 73)) | (1 << (PrototypeParser.Return - 73)) | (1 << (PrototypeParser.Void - 73)) | (1 << (PrototypeParser.Continue - 73)) | (1 << (PrototypeParser.For - 73)) | (1 << (PrototypeParser.Switch - 73)) | (1 << (PrototypeParser.While - 73)) | (1 << (PrototypeParser.Debugger - 73)) | (1 << (PrototypeParser.Function_ - 73)) | (1 << (PrototypeParser.This - 73)) | (1 << (PrototypeParser.With - 73)) | (1 << (PrototypeParser.Default - 73)) | (1 << (PrototypeParser.If - 73)) | (1 << (PrototypeParser.Throw - 73)) | (1 << (PrototypeParser.Delete - 73)) | (1 << (PrototypeParser.In - 73)) | (1 << (PrototypeParser.Try - 73)) | (1 << (PrototypeParser.As - 73)) | (1 << (PrototypeParser.From - 73)) | (1 << (PrototypeParser.Of - 73)) | (1 << (PrototypeParser.Yield - 73)) | (1 << (PrototypeParser.YieldStar - 73)) | (1 << (PrototypeParser.Class - 73)) | (1 << (PrototypeParser.Enum - 73)) | (1 << (PrototypeParser.Extends - 73)) | (1 << (PrototypeParser.Super - 73)) | (1 << (PrototypeParser.Const - 73)) | (1 << (PrototypeParser.Export - 73)) | (1 << (PrototypeParser.Import - 73)) | (1 << (PrototypeParser.Async - 73)) | (1 << (PrototypeParser.Await - 73)) | (1 << (PrototypeParser.Implements - 73)) | (1 << (PrototypeParser.StrictLet - 73)) | (1 << (PrototypeParser.NonStrictLet - 73)) | (1 << (PrototypeParser.Private - 73)) | (1 << (PrototypeParser.Public - 73)) | (1 << (PrototypeParser.Interface - 73)) | (1 << (PrototypeParser.Package - 73)) | (1 << (PrototypeParser.Protected - 73)) | (1 << (PrototypeParser.Static - 73)) | (1 << (PrototypeParser.Identifier - 73)))) != 0):
                    self.state = 517
                    self.assignable()


                self.state = 520
                self.match(PrototypeParser.CloseParen)


            self.state = 523
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(PrototypeParser.Finally, 0)

        def block(self):
            return self.getTypedRuleContext(PrototypeParser.BlockContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_finallyProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyProduction" ):
                listener.enterFinallyProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyProduction" ):
                listener.exitFinallyProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyProduction" ):
                return visitor.visitFinallyProduction(self)
            else:
                return visitor.visitChildren(self)




    def finallyProduction(self):

        localctx = PrototypeParser.FinallyProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_finallyProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(PrototypeParser.Finally)
            self.state = 526
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DebuggerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Debugger(self):
            return self.getToken(PrototypeParser.Debugger, 0)

        def eos(self):
            return self.getTypedRuleContext(PrototypeParser.EosContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_debuggerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebuggerStatement" ):
                listener.enterDebuggerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebuggerStatement" ):
                listener.exitDebuggerStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebuggerStatement" ):
                return visitor.visitDebuggerStatement(self)
            else:
                return visitor.visitChildren(self)




    def debuggerStatement(self):

        localctx = PrototypeParser.DebuggerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_debuggerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(PrototypeParser.Debugger)
            self.state = 529
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(PrototypeParser.Function_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def functionBody(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionBodyContext,0)


        def Async(self):
            return self.getToken(PrototypeParser.Async, 0)

        def Multiply(self):
            return self.getToken(PrototypeParser.Multiply, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PrototypeParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = PrototypeParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.Async:
                self.state = 531
                self.match(PrototypeParser.Async)


            self.state = 534
            self.match(PrototypeParser.Function_)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.Multiply:
                self.state = 535
                self.match(PrototypeParser.Multiply)


            self.state = 538
            self.identifier()
            self.state = 539
            self.match(PrototypeParser.OpenParen)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.Ellipsis))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (PrototypeParser.Break - 73)) | (1 << (PrototypeParser.Do - 73)) | (1 << (PrototypeParser.Instanceof - 73)) | (1 << (PrototypeParser.Typeof - 73)) | (1 << (PrototypeParser.Case - 73)) | (1 << (PrototypeParser.Else - 73)) | (1 << (PrototypeParser.New - 73)) | (1 << (PrototypeParser.Var - 73)) | (1 << (PrototypeParser.Catch - 73)) | (1 << (PrototypeParser.Finally - 73)) | (1 << (PrototypeParser.Return - 73)) | (1 << (PrototypeParser.Void - 73)) | (1 << (PrototypeParser.Continue - 73)) | (1 << (PrototypeParser.For - 73)) | (1 << (PrototypeParser.Switch - 73)) | (1 << (PrototypeParser.While - 73)) | (1 << (PrototypeParser.Debugger - 73)) | (1 << (PrototypeParser.Function_ - 73)) | (1 << (PrototypeParser.This - 73)) | (1 << (PrototypeParser.With - 73)) | (1 << (PrototypeParser.Default - 73)) | (1 << (PrototypeParser.If - 73)) | (1 << (PrototypeParser.Throw - 73)) | (1 << (PrototypeParser.Delete - 73)) | (1 << (PrototypeParser.In - 73)) | (1 << (PrototypeParser.Try - 73)) | (1 << (PrototypeParser.As - 73)) | (1 << (PrototypeParser.From - 73)) | (1 << (PrototypeParser.Of - 73)) | (1 << (PrototypeParser.Yield - 73)) | (1 << (PrototypeParser.YieldStar - 73)) | (1 << (PrototypeParser.Class - 73)) | (1 << (PrototypeParser.Enum - 73)) | (1 << (PrototypeParser.Extends - 73)) | (1 << (PrototypeParser.Super - 73)) | (1 << (PrototypeParser.Const - 73)) | (1 << (PrototypeParser.Export - 73)) | (1 << (PrototypeParser.Import - 73)) | (1 << (PrototypeParser.Async - 73)) | (1 << (PrototypeParser.Await - 73)) | (1 << (PrototypeParser.Implements - 73)) | (1 << (PrototypeParser.StrictLet - 73)) | (1 << (PrototypeParser.NonStrictLet - 73)) | (1 << (PrototypeParser.Private - 73)) | (1 << (PrototypeParser.Public - 73)) | (1 << (PrototypeParser.Interface - 73)) | (1 << (PrototypeParser.Package - 73)) | (1 << (PrototypeParser.Protected - 73)) | (1 << (PrototypeParser.Static - 73)) | (1 << (PrototypeParser.Identifier - 73)))) != 0):
                self.state = 540
                self.formalParameterList()


            self.state = 543
            self.match(PrototypeParser.CloseParen)
            self.state = 544
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(PrototypeParser.Class, 0)

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def classTail(self):
            return self.getTypedRuleContext(PrototypeParser.ClassTailContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = PrototypeParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_classDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(PrototypeParser.Class)
            self.state = 547
            self.identifier()
            self.state = 548
            self.classTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(PrototypeParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(PrototypeParser.CloseBrace, 0)

        def Extends(self):
            return self.getToken(PrototypeParser.Extends, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def classElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.ClassElementContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.ClassElementContext,i)


        def getRuleIndex(self):
            return PrototypeParser.RULE_classTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTail" ):
                listener.enterClassTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTail" ):
                listener.exitClassTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTail" ):
                return visitor.visitClassTail(self)
            else:
                return visitor.visitChildren(self)




    def classTail(self):

        localctx = PrototypeParser.ClassTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_classTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.Extends:
                self.state = 550
                self.match(PrototypeParser.Extends)
                self.state = 551
                self.singleExpression(0)


            self.state = 554
            self.match(PrototypeParser.OpenBrace)
            self.state = 558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 555
                    self.classElement() 
                self.state = 560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 561
            self.match(PrototypeParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDefinition(self):
            return self.getTypedRuleContext(PrototypeParser.MethodDefinitionContext,0)


        def Static(self):
            return self.getToken(PrototypeParser.Static, 0)

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def fieldDefinition(self):
            return self.getTypedRuleContext(PrototypeParser.FieldDefinitionContext,0)


        def block(self):
            return self.getTypedRuleContext(PrototypeParser.BlockContext,0)


        def emptyStatement_(self):
            return self.getTypedRuleContext(PrototypeParser.EmptyStatement_Context,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_classElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassElement" ):
                listener.enterClassElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassElement" ):
                listener.exitClassElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassElement" ):
                return visitor.visitClassElement(self)
            else:
                return visitor.visitChildren(self)




    def classElement(self):

        localctx = PrototypeParser.ClassElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_classElement)
        try:
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 563
                    self.match(PrototypeParser.Static)

                elif la_ == 2:
                    self.state = 564
                    if not self.n("static"):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.n(\"static\")")
                    self.state = 565
                    self.identifier()


                self.state = 568
                self.methodDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 569
                    self.match(PrototypeParser.Static)

                elif la_ == 2:
                    self.state = 570
                    if not self.n("static"):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.n(\"static\")")
                    self.state = 571
                    self.identifier()


                self.state = 574
                self.fieldDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 575
                    self.match(PrototypeParser.Static)
                    pass

                elif la_ == 2:
                    self.state = 576
                    if not self.n("static"):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.n(\"static\")")
                    self.state = 577
                    self.identifier()
                    pass


                self.state = 580
                self.block()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 581
                self.emptyStatement_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classElementName(self):
            return self.getTypedRuleContext(PrototypeParser.ClassElementNameContext,0)


        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def functionBody(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionBodyContext,0)


        def Async(self):
            return self.getToken(PrototypeParser.Async, 0)

        def Multiply(self):
            return self.getToken(PrototypeParser.Multiply, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PrototypeParser.FormalParameterListContext,0)


        def getter(self):
            return self.getTypedRuleContext(PrototypeParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(PrototypeParser.SetterContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_methodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDefinition" ):
                listener.enterMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDefinition" ):
                listener.exitMethodDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDefinition" ):
                return visitor.visitMethodDefinition(self)
            else:
                return visitor.visitChildren(self)




    def methodDefinition(self):

        localctx = PrototypeParser.MethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_methodDefinition)
        self._la = 0 # Token type
        try:
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 584
                    self.match(PrototypeParser.Async)
                    self.state = 585
                    if not self.notLineTerminator():
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.notLineTerminator()")


                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Multiply:
                    self.state = 588
                    self.match(PrototypeParser.Multiply)


                self.state = 591
                self.classElementName()
                self.state = 592
                self.match(PrototypeParser.OpenParen)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.Ellipsis))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (PrototypeParser.Break - 73)) | (1 << (PrototypeParser.Do - 73)) | (1 << (PrototypeParser.Instanceof - 73)) | (1 << (PrototypeParser.Typeof - 73)) | (1 << (PrototypeParser.Case - 73)) | (1 << (PrototypeParser.Else - 73)) | (1 << (PrototypeParser.New - 73)) | (1 << (PrototypeParser.Var - 73)) | (1 << (PrototypeParser.Catch - 73)) | (1 << (PrototypeParser.Finally - 73)) | (1 << (PrototypeParser.Return - 73)) | (1 << (PrototypeParser.Void - 73)) | (1 << (PrototypeParser.Continue - 73)) | (1 << (PrototypeParser.For - 73)) | (1 << (PrototypeParser.Switch - 73)) | (1 << (PrototypeParser.While - 73)) | (1 << (PrototypeParser.Debugger - 73)) | (1 << (PrototypeParser.Function_ - 73)) | (1 << (PrototypeParser.This - 73)) | (1 << (PrototypeParser.With - 73)) | (1 << (PrototypeParser.Default - 73)) | (1 << (PrototypeParser.If - 73)) | (1 << (PrototypeParser.Throw - 73)) | (1 << (PrototypeParser.Delete - 73)) | (1 << (PrototypeParser.In - 73)) | (1 << (PrototypeParser.Try - 73)) | (1 << (PrototypeParser.As - 73)) | (1 << (PrototypeParser.From - 73)) | (1 << (PrototypeParser.Of - 73)) | (1 << (PrototypeParser.Yield - 73)) | (1 << (PrototypeParser.YieldStar - 73)) | (1 << (PrototypeParser.Class - 73)) | (1 << (PrototypeParser.Enum - 73)) | (1 << (PrototypeParser.Extends - 73)) | (1 << (PrototypeParser.Super - 73)) | (1 << (PrototypeParser.Const - 73)) | (1 << (PrototypeParser.Export - 73)) | (1 << (PrototypeParser.Import - 73)) | (1 << (PrototypeParser.Async - 73)) | (1 << (PrototypeParser.Await - 73)) | (1 << (PrototypeParser.Implements - 73)) | (1 << (PrototypeParser.StrictLet - 73)) | (1 << (PrototypeParser.NonStrictLet - 73)) | (1 << (PrototypeParser.Private - 73)) | (1 << (PrototypeParser.Public - 73)) | (1 << (PrototypeParser.Interface - 73)) | (1 << (PrototypeParser.Package - 73)) | (1 << (PrototypeParser.Protected - 73)) | (1 << (PrototypeParser.Static - 73)) | (1 << (PrototypeParser.Identifier - 73)))) != 0):
                    self.state = 593
                    self.formalParameterList()


                self.state = 596
                self.match(PrototypeParser.CloseParen)
                self.state = 597
                self.functionBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 599
                    self.match(PrototypeParser.Multiply)


                self.state = 602
                self.getter()
                self.state = 603
                self.match(PrototypeParser.OpenParen)
                self.state = 604
                self.match(PrototypeParser.CloseParen)
                self.state = 605
                self.functionBody()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 607
                    self.match(PrototypeParser.Multiply)


                self.state = 610
                self.setter()
                self.state = 611
                self.match(PrototypeParser.OpenParen)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.Ellipsis))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (PrototypeParser.Break - 73)) | (1 << (PrototypeParser.Do - 73)) | (1 << (PrototypeParser.Instanceof - 73)) | (1 << (PrototypeParser.Typeof - 73)) | (1 << (PrototypeParser.Case - 73)) | (1 << (PrototypeParser.Else - 73)) | (1 << (PrototypeParser.New - 73)) | (1 << (PrototypeParser.Var - 73)) | (1 << (PrototypeParser.Catch - 73)) | (1 << (PrototypeParser.Finally - 73)) | (1 << (PrototypeParser.Return - 73)) | (1 << (PrototypeParser.Void - 73)) | (1 << (PrototypeParser.Continue - 73)) | (1 << (PrototypeParser.For - 73)) | (1 << (PrototypeParser.Switch - 73)) | (1 << (PrototypeParser.While - 73)) | (1 << (PrototypeParser.Debugger - 73)) | (1 << (PrototypeParser.Function_ - 73)) | (1 << (PrototypeParser.This - 73)) | (1 << (PrototypeParser.With - 73)) | (1 << (PrototypeParser.Default - 73)) | (1 << (PrototypeParser.If - 73)) | (1 << (PrototypeParser.Throw - 73)) | (1 << (PrototypeParser.Delete - 73)) | (1 << (PrototypeParser.In - 73)) | (1 << (PrototypeParser.Try - 73)) | (1 << (PrototypeParser.As - 73)) | (1 << (PrototypeParser.From - 73)) | (1 << (PrototypeParser.Of - 73)) | (1 << (PrototypeParser.Yield - 73)) | (1 << (PrototypeParser.YieldStar - 73)) | (1 << (PrototypeParser.Class - 73)) | (1 << (PrototypeParser.Enum - 73)) | (1 << (PrototypeParser.Extends - 73)) | (1 << (PrototypeParser.Super - 73)) | (1 << (PrototypeParser.Const - 73)) | (1 << (PrototypeParser.Export - 73)) | (1 << (PrototypeParser.Import - 73)) | (1 << (PrototypeParser.Async - 73)) | (1 << (PrototypeParser.Await - 73)) | (1 << (PrototypeParser.Implements - 73)) | (1 << (PrototypeParser.StrictLet - 73)) | (1 << (PrototypeParser.NonStrictLet - 73)) | (1 << (PrototypeParser.Private - 73)) | (1 << (PrototypeParser.Public - 73)) | (1 << (PrototypeParser.Interface - 73)) | (1 << (PrototypeParser.Package - 73)) | (1 << (PrototypeParser.Protected - 73)) | (1 << (PrototypeParser.Static - 73)) | (1 << (PrototypeParser.Identifier - 73)))) != 0):
                    self.state = 612
                    self.formalParameterList()


                self.state = 615
                self.match(PrototypeParser.CloseParen)
                self.state = 616
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classElementName(self):
            return self.getTypedRuleContext(PrototypeParser.ClassElementNameContext,0)


        def initializer(self):
            return self.getTypedRuleContext(PrototypeParser.InitializerContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_fieldDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDefinition" ):
                listener.enterFieldDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDefinition" ):
                listener.exitFieldDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDefinition" ):
                return visitor.visitFieldDefinition(self)
            else:
                return visitor.visitChildren(self)




    def fieldDefinition(self):

        localctx = PrototypeParser.FieldDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fieldDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.classElementName()
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 621
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassElementNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(PrototypeParser.PropertyNameContext,0)


        def privateIdentifier(self):
            return self.getTypedRuleContext(PrototypeParser.PrivateIdentifierContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_classElementName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassElementName" ):
                listener.enterClassElementName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassElementName" ):
                listener.exitClassElementName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassElementName" ):
                return visitor.visitClassElementName(self)
            else:
                return visitor.visitChildren(self)




    def classElementName(self):

        localctx = PrototypeParser.ClassElementNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classElementName)
        try:
            self.state = 626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.OpenBracket, PrototypeParser.NullLiteral, PrototypeParser.BooleanLiteral, PrototypeParser.DecimalLiteral, PrototypeParser.HexIntegerLiteral, PrototypeParser.OctalIntegerLiteral, PrototypeParser.OctalIntegerLiteral2, PrototypeParser.BinaryIntegerLiteral, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier, PrototypeParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.propertyName()
                pass
            elif token in [PrototypeParser.Hashtag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.privateIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivateIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hashtag(self):
            return self.getToken(PrototypeParser.Hashtag, 0)

        def identifierName(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierNameContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_privateIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateIdentifier" ):
                listener.enterPrivateIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateIdentifier" ):
                listener.exitPrivateIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateIdentifier" ):
                return visitor.visitPrivateIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def privateIdentifier(self):

        localctx = PrototypeParser.PrivateIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_privateIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(PrototypeParser.Hashtag)
            self.state = 629
            self.identifierName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.FormalParameterArgContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.FormalParameterArgContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.Comma)
            else:
                return self.getToken(PrototypeParser.Comma, i)

        def lastFormalParameterArg(self):
            return self.getTypedRuleContext(PrototypeParser.LastFormalParameterArgContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = PrototypeParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.OpenBracket, PrototypeParser.OpenBrace, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.formalParameterArg()
                self.state = 636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 632
                        self.match(PrototypeParser.Comma)
                        self.state = 633
                        self.formalParameterArg() 
                    self.state = 638
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Comma:
                    self.state = 639
                    self.match(PrototypeParser.Comma)
                    self.state = 640
                    self.lastFormalParameterArg()


                pass
            elif token in [PrototypeParser.Ellipsis]:
                self.enterOuterAlt(localctx, 2)
                self.state = 643
                self.lastFormalParameterArg()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(PrototypeParser.AssignableContext,0)


        def Assign(self):
            return self.getToken(PrototypeParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_formalParameterArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterArg" ):
                listener.enterFormalParameterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterArg" ):
                listener.exitFormalParameterArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterArg" ):
                return visitor.visitFormalParameterArg(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterArg(self):

        localctx = PrototypeParser.FormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_formalParameterArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.assignable()
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.Assign:
                self.state = 647
                self.match(PrototypeParser.Assign)
                self.state = 648
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LastFormalParameterArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(PrototypeParser.Ellipsis, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_lastFormalParameterArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameterArg" ):
                listener.enterLastFormalParameterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameterArg" ):
                listener.exitLastFormalParameterArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastFormalParameterArg" ):
                return visitor.visitLastFormalParameterArg(self)
            else:
                return visitor.visitChildren(self)




    def lastFormalParameterArg(self):

        localctx = PrototypeParser.LastFormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_lastFormalParameterArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(PrototypeParser.Ellipsis)
            self.state = 652
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(PrototypeParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(PrototypeParser.CloseBrace, 0)

        def sourceElements(self):
            return self.getTypedRuleContext(PrototypeParser.SourceElementsContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = PrototypeParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(PrototypeParser.OpenBrace)
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 655
                self.sourceElements()


            self.state = 658
            self.match(PrototypeParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SourceElementContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SourceElementContext,i)


        def getRuleIndex(self):
            return PrototypeParser.RULE_sourceElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceElements" ):
                listener.enterSourceElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceElements" ):
                listener.exitSourceElements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceElements" ):
                return visitor.visitSourceElements(self)
            else:
                return visitor.visitChildren(self)




    def sourceElements(self):

        localctx = PrototypeParser.SourceElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_sourceElements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 660
                    self.sourceElement()

                else:
                    raise NoViableAltException(self)
                self.state = 663 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBracket(self):
            return self.getToken(PrototypeParser.OpenBracket, 0)

        def elementList(self):
            return self.getTypedRuleContext(PrototypeParser.ElementListContext,0)


        def CloseBracket(self):
            return self.getToken(PrototypeParser.CloseBracket, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = PrototypeParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arrayLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(PrototypeParser.OpenBracket)
            self.state = 666
            self.elementList()
            self.state = 667
            self.match(PrototypeParser.CloseBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.Comma)
            else:
                return self.getToken(PrototypeParser.Comma, i)

        def arrayElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.ArrayElementContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.ArrayElementContext,i)


        def getRuleIndex(self):
            return PrototypeParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementList" ):
                return visitor.visitElementList(self)
            else:
                return visitor.visitChildren(self)




    def elementList(self):

        localctx = PrototypeParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 669
                    self.match(PrototypeParser.Comma) 
                self.state = 674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.RegularExpressionLiteral) | (1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenParen) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.Ellipsis) | (1 << PrototypeParser.PlusPlus) | (1 << PrototypeParser.MinusMinus) | (1 << PrototypeParser.Plus) | (1 << PrototypeParser.Minus) | (1 << PrototypeParser.BitNot) | (1 << PrototypeParser.Not) | (1 << PrototypeParser.NullLiteral) | (1 << PrototypeParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrototypeParser.DecimalLiteral - 64)) | (1 << (PrototypeParser.HexIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral2 - 64)) | (1 << (PrototypeParser.BinaryIntegerLiteral - 64)) | (1 << (PrototypeParser.BigHexIntegerLiteral - 64)) | (1 << (PrototypeParser.BigOctalIntegerLiteral - 64)) | (1 << (PrototypeParser.BigBinaryIntegerLiteral - 64)) | (1 << (PrototypeParser.BigDecimalIntegerLiteral - 64)) | (1 << (PrototypeParser.Break - 64)) | (1 << (PrototypeParser.Do - 64)) | (1 << (PrototypeParser.Instanceof - 64)) | (1 << (PrototypeParser.Typeof - 64)) | (1 << (PrototypeParser.Case - 64)) | (1 << (PrototypeParser.Else - 64)) | (1 << (PrototypeParser.New - 64)) | (1 << (PrototypeParser.Var - 64)) | (1 << (PrototypeParser.Catch - 64)) | (1 << (PrototypeParser.Finally - 64)) | (1 << (PrototypeParser.Return - 64)) | (1 << (PrototypeParser.Void - 64)) | (1 << (PrototypeParser.Continue - 64)) | (1 << (PrototypeParser.For - 64)) | (1 << (PrototypeParser.Switch - 64)) | (1 << (PrototypeParser.While - 64)) | (1 << (PrototypeParser.Debugger - 64)) | (1 << (PrototypeParser.Function_ - 64)) | (1 << (PrototypeParser.This - 64)) | (1 << (PrototypeParser.With - 64)) | (1 << (PrototypeParser.Default - 64)) | (1 << (PrototypeParser.If - 64)) | (1 << (PrototypeParser.Throw - 64)) | (1 << (PrototypeParser.Delete - 64)) | (1 << (PrototypeParser.In - 64)) | (1 << (PrototypeParser.Try - 64)) | (1 << (PrototypeParser.As - 64)) | (1 << (PrototypeParser.From - 64)) | (1 << (PrototypeParser.Of - 64)) | (1 << (PrototypeParser.Yield - 64)) | (1 << (PrototypeParser.YieldStar - 64)) | (1 << (PrototypeParser.Class - 64)) | (1 << (PrototypeParser.Enum - 64)) | (1 << (PrototypeParser.Extends - 64)) | (1 << (PrototypeParser.Super - 64)) | (1 << (PrototypeParser.Const - 64)) | (1 << (PrototypeParser.Export - 64)) | (1 << (PrototypeParser.Import - 64)) | (1 << (PrototypeParser.Async - 64)) | (1 << (PrototypeParser.Await - 64)) | (1 << (PrototypeParser.Implements - 64)) | (1 << (PrototypeParser.StrictLet - 64)) | (1 << (PrototypeParser.NonStrictLet - 64)) | (1 << (PrototypeParser.Private - 64)) | (1 << (PrototypeParser.Public - 64)) | (1 << (PrototypeParser.Interface - 64)) | (1 << (PrototypeParser.Package - 64)) | (1 << (PrototypeParser.Protected - 64)) | (1 << (PrototypeParser.Static - 64)) | (1 << (PrototypeParser.Identifier - 64)) | (1 << (PrototypeParser.StringLiteral - 64)) | (1 << (PrototypeParser.BackTick - 64)))) != 0):
                self.state = 675
                self.arrayElement()


            self.state = 686
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 679 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 678
                        self.match(PrototypeParser.Comma)
                        self.state = 681 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==PrototypeParser.Comma):
                            break

                    self.state = 683
                    self.arrayElement() 
                self.state = 688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PrototypeParser.Comma:
                self.state = 689
                self.match(PrototypeParser.Comma)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(PrototypeParser.Ellipsis, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_arrayElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElement" ):
                listener.enterArrayElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElement" ):
                listener.exitArrayElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayElement" ):
                return visitor.visitArrayElement(self)
            else:
                return visitor.visitChildren(self)




    def arrayElement(self):

        localctx = PrototypeParser.ArrayElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arrayElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.Ellipsis:
                self.state = 695
                self.match(PrototypeParser.Ellipsis)


            self.state = 698
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrototypeParser.RULE_propertyAssignment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(PrototypeParser.PropertyNameContext,0)

        def Colon(self):
            return self.getToken(PrototypeParser.Colon, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyExpressionAssignment" ):
                listener.enterPropertyExpressionAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyExpressionAssignment" ):
                listener.exitPropertyExpressionAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyExpressionAssignment" ):
                return visitor.visitPropertyExpressionAssignment(self)
            else:
                return visitor.visitChildren(self)


    class ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenBracket(self):
            return self.getToken(PrototypeParser.OpenBracket, 0)
        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def CloseBracket(self):
            return self.getToken(PrototypeParser.CloseBracket, 0)
        def Colon(self):
            return self.getToken(PrototypeParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputedPropertyExpressionAssignment" ):
                listener.enterComputedPropertyExpressionAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputedPropertyExpressionAssignment" ):
                listener.exitComputedPropertyExpressionAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComputedPropertyExpressionAssignment" ):
                return visitor.visitComputedPropertyExpressionAssignment(self)
            else:
                return visitor.visitChildren(self)


    class PropertyShorthandContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def Ellipsis(self):
            return self.getToken(PrototypeParser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyShorthand" ):
                listener.enterPropertyShorthand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyShorthand" ):
                listener.exitPropertyShorthand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyShorthand" ):
                return visitor.visitPropertyShorthand(self)
            else:
                return visitor.visitChildren(self)


    class PropertySetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setter(self):
            return self.getTypedRuleContext(PrototypeParser.SetterContext,0)

        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def formalParameterArg(self):
            return self.getTypedRuleContext(PrototypeParser.FormalParameterArgContext,0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def functionBody(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetter" ):
                listener.enterPropertySetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetter" ):
                listener.exitPropertySetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertySetter" ):
                return visitor.visitPropertySetter(self)
            else:
                return visitor.visitChildren(self)


    class PropertyGetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def getter(self):
            return self.getTypedRuleContext(PrototypeParser.GetterContext,0)

        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def functionBody(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetter" ):
                listener.enterPropertyGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetter" ):
                listener.exitPropertyGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyGetter" ):
                return visitor.visitPropertyGetter(self)
            else:
                return visitor.visitChildren(self)


    class FunctionPropertyContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(PrototypeParser.PropertyNameContext,0)

        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def functionBody(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionBodyContext,0)

        def Async(self):
            return self.getToken(PrototypeParser.Async, 0)
        def Multiply(self):
            return self.getToken(PrototypeParser.Multiply, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(PrototypeParser.FormalParameterListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionProperty" ):
                listener.enterFunctionProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionProperty" ):
                listener.exitFunctionProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionProperty" ):
                return visitor.visitFunctionProperty(self)
            else:
                return visitor.visitChildren(self)



    def propertyAssignment(self):

        localctx = PrototypeParser.PropertyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_propertyAssignment)
        self._la = 0 # Token type
        try:
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = PrototypeParser.PropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.propertyName()
                self.state = 701
                self.match(PrototypeParser.Colon)
                self.state = 702
                self.singleExpression(0)
                pass

            elif la_ == 2:
                localctx = PrototypeParser.ComputedPropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.match(PrototypeParser.OpenBracket)
                self.state = 705
                self.singleExpression(0)
                self.state = 706
                self.match(PrototypeParser.CloseBracket)
                self.state = 707
                self.match(PrototypeParser.Colon)
                self.state = 708
                self.singleExpression(0)
                pass

            elif la_ == 3:
                localctx = PrototypeParser.FunctionPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 710
                    self.match(PrototypeParser.Async)


                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Multiply:
                    self.state = 713
                    self.match(PrototypeParser.Multiply)


                self.state = 716
                self.propertyName()
                self.state = 717
                self.match(PrototypeParser.OpenParen)
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.Ellipsis))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (PrototypeParser.Break - 73)) | (1 << (PrototypeParser.Do - 73)) | (1 << (PrototypeParser.Instanceof - 73)) | (1 << (PrototypeParser.Typeof - 73)) | (1 << (PrototypeParser.Case - 73)) | (1 << (PrototypeParser.Else - 73)) | (1 << (PrototypeParser.New - 73)) | (1 << (PrototypeParser.Var - 73)) | (1 << (PrototypeParser.Catch - 73)) | (1 << (PrototypeParser.Finally - 73)) | (1 << (PrototypeParser.Return - 73)) | (1 << (PrototypeParser.Void - 73)) | (1 << (PrototypeParser.Continue - 73)) | (1 << (PrototypeParser.For - 73)) | (1 << (PrototypeParser.Switch - 73)) | (1 << (PrototypeParser.While - 73)) | (1 << (PrototypeParser.Debugger - 73)) | (1 << (PrototypeParser.Function_ - 73)) | (1 << (PrototypeParser.This - 73)) | (1 << (PrototypeParser.With - 73)) | (1 << (PrototypeParser.Default - 73)) | (1 << (PrototypeParser.If - 73)) | (1 << (PrototypeParser.Throw - 73)) | (1 << (PrototypeParser.Delete - 73)) | (1 << (PrototypeParser.In - 73)) | (1 << (PrototypeParser.Try - 73)) | (1 << (PrototypeParser.As - 73)) | (1 << (PrototypeParser.From - 73)) | (1 << (PrototypeParser.Of - 73)) | (1 << (PrototypeParser.Yield - 73)) | (1 << (PrototypeParser.YieldStar - 73)) | (1 << (PrototypeParser.Class - 73)) | (1 << (PrototypeParser.Enum - 73)) | (1 << (PrototypeParser.Extends - 73)) | (1 << (PrototypeParser.Super - 73)) | (1 << (PrototypeParser.Const - 73)) | (1 << (PrototypeParser.Export - 73)) | (1 << (PrototypeParser.Import - 73)) | (1 << (PrototypeParser.Async - 73)) | (1 << (PrototypeParser.Await - 73)) | (1 << (PrototypeParser.Implements - 73)) | (1 << (PrototypeParser.StrictLet - 73)) | (1 << (PrototypeParser.NonStrictLet - 73)) | (1 << (PrototypeParser.Private - 73)) | (1 << (PrototypeParser.Public - 73)) | (1 << (PrototypeParser.Interface - 73)) | (1 << (PrototypeParser.Package - 73)) | (1 << (PrototypeParser.Protected - 73)) | (1 << (PrototypeParser.Static - 73)) | (1 << (PrototypeParser.Identifier - 73)))) != 0):
                    self.state = 718
                    self.formalParameterList()


                self.state = 721
                self.match(PrototypeParser.CloseParen)
                self.state = 722
                self.functionBody()
                pass

            elif la_ == 4:
                localctx = PrototypeParser.PropertyGetterContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 724
                self.getter()
                self.state = 725
                self.match(PrototypeParser.OpenParen)
                self.state = 726
                self.match(PrototypeParser.CloseParen)
                self.state = 727
                self.functionBody()
                pass

            elif la_ == 5:
                localctx = PrototypeParser.PropertySetterContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 729
                self.setter()
                self.state = 730
                self.match(PrototypeParser.OpenParen)
                self.state = 731
                self.formalParameterArg()
                self.state = 732
                self.match(PrototypeParser.CloseParen)
                self.state = 733
                self.functionBody()
                pass

            elif la_ == 6:
                localctx = PrototypeParser.PropertyShorthandContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Ellipsis:
                    self.state = 735
                    self.match(PrototypeParser.Ellipsis)


                self.state = 738
                self.singleExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierNameContext,0)


        def StringLiteral(self):
            return self.getToken(PrototypeParser.StringLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.NumericLiteralContext,0)


        def OpenBracket(self):
            return self.getToken(PrototypeParser.OpenBracket, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def CloseBracket(self):
            return self.getToken(PrototypeParser.CloseBracket, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_propertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyName" ):
                listener.enterPropertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyName" ):
                listener.exitPropertyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyName" ):
                return visitor.visitPropertyName(self)
            else:
                return visitor.visitChildren(self)




    def propertyName(self):

        localctx = PrototypeParser.PropertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_propertyName)
        try:
            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.NullLiteral, PrototypeParser.BooleanLiteral, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self.identifierName()
                pass
            elif token in [PrototypeParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.match(PrototypeParser.StringLiteral)
                pass
            elif token in [PrototypeParser.DecimalLiteral, PrototypeParser.HexIntegerLiteral, PrototypeParser.OctalIntegerLiteral, PrototypeParser.OctalIntegerLiteral2, PrototypeParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 743
                self.numericLiteral()
                pass
            elif token in [PrototypeParser.OpenBracket]:
                self.enterOuterAlt(localctx, 4)
                self.state = 744
                self.match(PrototypeParser.OpenBracket)
                self.state = 745
                self.singleExpression(0)
                self.state = 746
                self.match(PrototypeParser.CloseBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.ArgumentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.Comma)
            else:
                return self.getToken(PrototypeParser.Comma, i)

        def getRuleIndex(self):
            return PrototypeParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = PrototypeParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(PrototypeParser.OpenParen)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.RegularExpressionLiteral) | (1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenParen) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.Ellipsis) | (1 << PrototypeParser.PlusPlus) | (1 << PrototypeParser.MinusMinus) | (1 << PrototypeParser.Plus) | (1 << PrototypeParser.Minus) | (1 << PrototypeParser.BitNot) | (1 << PrototypeParser.Not) | (1 << PrototypeParser.NullLiteral) | (1 << PrototypeParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrototypeParser.DecimalLiteral - 64)) | (1 << (PrototypeParser.HexIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral2 - 64)) | (1 << (PrototypeParser.BinaryIntegerLiteral - 64)) | (1 << (PrototypeParser.BigHexIntegerLiteral - 64)) | (1 << (PrototypeParser.BigOctalIntegerLiteral - 64)) | (1 << (PrototypeParser.BigBinaryIntegerLiteral - 64)) | (1 << (PrototypeParser.BigDecimalIntegerLiteral - 64)) | (1 << (PrototypeParser.Break - 64)) | (1 << (PrototypeParser.Do - 64)) | (1 << (PrototypeParser.Instanceof - 64)) | (1 << (PrototypeParser.Typeof - 64)) | (1 << (PrototypeParser.Case - 64)) | (1 << (PrototypeParser.Else - 64)) | (1 << (PrototypeParser.New - 64)) | (1 << (PrototypeParser.Var - 64)) | (1 << (PrototypeParser.Catch - 64)) | (1 << (PrototypeParser.Finally - 64)) | (1 << (PrototypeParser.Return - 64)) | (1 << (PrototypeParser.Void - 64)) | (1 << (PrototypeParser.Continue - 64)) | (1 << (PrototypeParser.For - 64)) | (1 << (PrototypeParser.Switch - 64)) | (1 << (PrototypeParser.While - 64)) | (1 << (PrototypeParser.Debugger - 64)) | (1 << (PrototypeParser.Function_ - 64)) | (1 << (PrototypeParser.This - 64)) | (1 << (PrototypeParser.With - 64)) | (1 << (PrototypeParser.Default - 64)) | (1 << (PrototypeParser.If - 64)) | (1 << (PrototypeParser.Throw - 64)) | (1 << (PrototypeParser.Delete - 64)) | (1 << (PrototypeParser.In - 64)) | (1 << (PrototypeParser.Try - 64)) | (1 << (PrototypeParser.As - 64)) | (1 << (PrototypeParser.From - 64)) | (1 << (PrototypeParser.Of - 64)) | (1 << (PrototypeParser.Yield - 64)) | (1 << (PrototypeParser.YieldStar - 64)) | (1 << (PrototypeParser.Class - 64)) | (1 << (PrototypeParser.Enum - 64)) | (1 << (PrototypeParser.Extends - 64)) | (1 << (PrototypeParser.Super - 64)) | (1 << (PrototypeParser.Const - 64)) | (1 << (PrototypeParser.Export - 64)) | (1 << (PrototypeParser.Import - 64)) | (1 << (PrototypeParser.Async - 64)) | (1 << (PrototypeParser.Await - 64)) | (1 << (PrototypeParser.Implements - 64)) | (1 << (PrototypeParser.StrictLet - 64)) | (1 << (PrototypeParser.NonStrictLet - 64)) | (1 << (PrototypeParser.Private - 64)) | (1 << (PrototypeParser.Public - 64)) | (1 << (PrototypeParser.Interface - 64)) | (1 << (PrototypeParser.Package - 64)) | (1 << (PrototypeParser.Protected - 64)) | (1 << (PrototypeParser.Static - 64)) | (1 << (PrototypeParser.Identifier - 64)) | (1 << (PrototypeParser.StringLiteral - 64)) | (1 << (PrototypeParser.BackTick - 64)))) != 0):
                self.state = 751
                self.argument()
                self.state = 756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 752
                        self.match(PrototypeParser.Comma)
                        self.state = 753
                        self.argument() 
                    self.state = 758
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Comma:
                    self.state = 759
                    self.match(PrototypeParser.Comma)




            self.state = 764
            self.match(PrototypeParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def Ellipsis(self):
            return self.getToken(PrototypeParser.Ellipsis, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = PrototypeParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrototypeParser.Ellipsis:
                self.state = 766
                self.match(PrototypeParser.Ellipsis)


            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 769
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.state = 770
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionSequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.Comma)
            else:
                return self.getToken(PrototypeParser.Comma, i)

        def getRuleIndex(self):
            return PrototypeParser.RULE_expressionSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSequence" ):
                listener.enterExpressionSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSequence" ):
                listener.exitExpressionSequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionSequence" ):
                return visitor.visitExpressionSequence(self)
            else:
                return visitor.visitChildren(self)




    def expressionSequence(self):

        localctx = PrototypeParser.ExpressionSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_expressionSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.singleExpression(0)
            self.state = 778
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 774
                    self.match(PrototypeParser.Comma)
                    self.state = 775
                    self.singleExpression(0) 
                self.state = 780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrototypeParser.RULE_singleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TemplateStringExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def templateStringLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.TemplateStringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringExpression" ):
                listener.enterTemplateStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringExpression" ):
                listener.exitTemplateStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateStringExpression" ):
                return visitor.visitTemplateStringExpression(self)
            else:
                return visitor.visitChildren(self)


    class TernaryExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def QuestionMark(self):
            return self.getToken(PrototypeParser.QuestionMark, 0)
        def Colon(self):
            return self.getToken(PrototypeParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTernaryExpression" ):
                return visitor.visitTernaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def And(self):
            return self.getToken(PrototypeParser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class PowerExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def Power(self):
            return self.getToken(PrototypeParser.Power, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpression" ):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)


    class PreIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusPlus(self):
            return self.getToken(PrototypeParser.PlusPlus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpression" ):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpression" ):
                listener.exitPreIncrementExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreIncrementExpression" ):
                return visitor.visitPreIncrementExpression(self)
            else:
                return visitor.visitChildren(self)


    class ObjectLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.ObjectLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteralExpression" ):
                listener.enterObjectLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteralExpression" ):
                listener.exitObjectLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteralExpression" ):
                return visitor.visitObjectLiteralExpression(self)
            else:
                return visitor.visitChildren(self)


    class MetaExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(PrototypeParser.New, 0)
        def Dot(self):
            return self.getToken(PrototypeParser.Dot, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetaExpression" ):
                listener.enterMetaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetaExpression" ):
                listener.exitMetaExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetaExpression" ):
                return visitor.visitMetaExpression(self)
            else:
                return visitor.visitChildren(self)


    class InExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def In(self):
            return self.getToken(PrototypeParser.In, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpression" ):
                listener.enterInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpression" ):
                listener.exitInExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInExpression" ):
                return visitor.visitInExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def Or(self):
            return self.getToken(PrototypeParser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class OptionalChainExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def QuestionMarkDot(self):
            return self.getToken(PrototypeParser.QuestionMarkDot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalChainExpression" ):
                listener.enterOptionalChainExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalChainExpression" ):
                listener.exitOptionalChainExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalChainExpression" ):
                return visitor.visitOptionalChainExpression(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Not(self):
            return self.getToken(PrototypeParser.Not, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class PreDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusMinus(self):
            return self.getToken(PrototypeParser.MinusMinus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreDecreaseExpression" ):
                listener.enterPreDecreaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreDecreaseExpression" ):
                listener.exitPreDecreaseExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreDecreaseExpression" ):
                return visitor.visitPreDecreaseExpression(self)
            else:
                return visitor.visitChildren(self)


    class ArgumentsExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def arguments(self):
            return self.getTypedRuleContext(PrototypeParser.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentsExpression" ):
                listener.enterArgumentsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentsExpression" ):
                listener.exitArgumentsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentsExpression" ):
                return visitor.visitArgumentsExpression(self)
            else:
                return visitor.visitChildren(self)


    class AwaitExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Await(self):
            return self.getToken(PrototypeParser.Await, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAwaitExpression" ):
                listener.enterAwaitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAwaitExpression" ):
                listener.exitAwaitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAwaitExpression" ):
                return visitor.visitAwaitExpression(self)
            else:
                return visitor.visitChildren(self)


    class ThisExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(PrototypeParser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThisExpression" ):
                return visitor.visitThisExpression(self)
            else:
                return visitor.visitChildren(self)


    class FunctionExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def anonymousFunction(self):
            return self.getTypedRuleContext(PrototypeParser.AnonymousFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpression" ):
                listener.enterFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpression" ):
                listener.exitFunctionExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionExpression" ):
                return visitor.visitFunctionExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryMinusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Minus(self):
            return self.getToken(PrototypeParser.Minus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinusExpression" ):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinusExpression" ):
                listener.exitUnaryMinusExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryMinusExpression" ):
                return visitor.visitUnaryMinusExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def Assign(self):
            return self.getToken(PrototypeParser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)


    class PostDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def MinusMinus(self):
            return self.getToken(PrototypeParser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostDecreaseExpression" ):
                listener.enterPostDecreaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostDecreaseExpression" ):
                listener.exitPostDecreaseExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostDecreaseExpression" ):
                return visitor.visitPostDecreaseExpression(self)
            else:
                return visitor.visitChildren(self)


    class TypeofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typeof(self):
            return self.getToken(PrototypeParser.Typeof, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeofExpression" ):
                return visitor.visitTypeofExpression(self)
            else:
                return visitor.visitChildren(self)


    class InstanceofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def Instanceof(self):
            return self.getToken(PrototypeParser.Instanceof, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceofExpression" ):
                listener.enterInstanceofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceofExpression" ):
                listener.exitInstanceofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceofExpression" ):
                return visitor.visitInstanceofExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryPlusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Plus(self):
            return self.getToken(PrototypeParser.Plus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusExpression" ):
                listener.enterUnaryPlusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusExpression" ):
                listener.exitUnaryPlusExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryPlusExpression" ):
                return visitor.visitUnaryPlusExpression(self)
            else:
                return visitor.visitChildren(self)


    class DeleteExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(PrototypeParser.Delete, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteExpression" ):
                listener.enterDeleteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteExpression" ):
                listener.exitDeleteExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteExpression" ):
                return visitor.visitDeleteExpression(self)
            else:
                return visitor.visitChildren(self)


    class ImportExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Import(self):
            return self.getToken(PrototypeParser.Import, 0)
        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportExpression" ):
                listener.enterImportExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportExpression" ):
                listener.exitImportExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportExpression" ):
                return visitor.visitImportExpression(self)
            else:
                return visitor.visitChildren(self)


    class EqualityExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def Equals_(self):
            return self.getToken(PrototypeParser.Equals_, 0)
        def NotEquals(self):
            return self.getToken(PrototypeParser.NotEquals, 0)
        def IdentityEquals(self):
            return self.getToken(PrototypeParser.IdentityEquals, 0)
        def IdentityNotEquals(self):
            return self.getToken(PrototypeParser.IdentityNotEquals, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitXOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def BitXOr(self):
            return self.getToken(PrototypeParser.BitXOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXOrExpression" ):
                listener.enterBitXOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXOrExpression" ):
                listener.exitBitXOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitXOrExpression" ):
                return visitor.visitBitXOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class SuperExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Super(self):
            return self.getToken(PrototypeParser.Super, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperExpression" ):
                return visitor.visitSuperExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicativeExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def Multiply(self):
            return self.getToken(PrototypeParser.Multiply, 0)
        def Divide(self):
            return self.getToken(PrototypeParser.Divide, 0)
        def Modulus(self):
            return self.getToken(PrototypeParser.Modulus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitShiftExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def LeftShiftArithmetic(self):
            return self.getToken(PrototypeParser.LeftShiftArithmetic, 0)
        def RightShiftArithmetic(self):
            return self.getToken(PrototypeParser.RightShiftArithmetic, 0)
        def RightShiftLogical(self):
            return self.getToken(PrototypeParser.RightShiftLogical, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitShiftExpression" ):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitShiftExpression" ):
                listener.exitBitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitShiftExpression" ):
                return visitor.visitBitShiftExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class AdditiveExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def Plus(self):
            return self.getToken(PrototypeParser.Plus, 0)
        def Minus(self):
            return self.getToken(PrototypeParser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)


    class RelationalExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def LessThan(self):
            return self.getToken(PrototypeParser.LessThan, 0)
        def MoreThan(self):
            return self.getToken(PrototypeParser.MoreThan, 0)
        def LessThanEquals(self):
            return self.getToken(PrototypeParser.LessThanEquals, 0)
        def GreaterThanEquals(self):
            return self.getToken(PrototypeParser.GreaterThanEquals, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)


    class PostIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def PlusPlus(self):
            return self.getToken(PrototypeParser.PlusPlus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementExpression" ):
                listener.enterPostIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementExpression" ):
                listener.exitPostIncrementExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostIncrementExpression" ):
                return visitor.visitPostIncrementExpression(self)
            else:
                return visitor.visitChildren(self)


    class YieldExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yieldStatement(self):
            return self.getTypedRuleContext(PrototypeParser.YieldStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpression" ):
                listener.enterYieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpression" ):
                listener.exitYieldExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldExpression" ):
                return visitor.visitYieldExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitNotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BitNot(self):
            return self.getToken(PrototypeParser.BitNot, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitNotExpression" ):
                listener.enterBitNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitNotExpression" ):
                listener.exitBitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitNotExpression" ):
                return visitor.visitBitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class NewExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(PrototypeParser.New, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)

        def arguments(self):
            return self.getTypedRuleContext(PrototypeParser.ArgumentsContext,0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpression" ):
                return visitor.visitNewExpression(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(PrototypeParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)


    class ArrayLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.ArrayLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteralExpression" ):
                listener.enterArrayLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteralExpression" ):
                listener.exitArrayLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteralExpression" ):
                return visitor.visitArrayLiteralExpression(self)
            else:
                return visitor.visitChildren(self)


    class MemberDotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def Dot(self):
            return self.getToken(PrototypeParser.Dot, 0)
        def identifierName(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierNameContext,0)

        def QuestionMark(self):
            return self.getToken(PrototypeParser.QuestionMark, 0)
        def Hashtag(self):
            return self.getToken(PrototypeParser.Hashtag, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDotExpression" ):
                listener.enterMemberDotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDotExpression" ):
                listener.exitMemberDotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDotExpression" ):
                return visitor.visitMemberDotExpression(self)
            else:
                return visitor.visitChildren(self)


    class ClassExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(PrototypeParser.Class, 0)
        def classTail(self):
            return self.getTypedRuleContext(PrototypeParser.ClassTailContext,0)

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)


    class MemberIndexExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)

        def OpenBracket(self):
            return self.getToken(PrototypeParser.OpenBracket, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(PrototypeParser.ExpressionSequenceContext,0)

        def CloseBracket(self):
            return self.getToken(PrototypeParser.CloseBracket, 0)
        def QuestionMarkDot(self):
            return self.getToken(PrototypeParser.QuestionMarkDot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberIndexExpression" ):
                listener.enterMemberIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberIndexExpression" ):
                listener.exitMemberIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberIndexExpression" ):
                return visitor.visitMemberIndexExpression(self)
            else:
                return visitor.visitChildren(self)


    class IdentifierExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExpression" ):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExpression" ):
                listener.exitIdentifierExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierExpression" ):
                return visitor.visitIdentifierExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def BitAnd(self):
            return self.getToken(PrototypeParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndExpression" ):
                return visitor.visitBitAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def BitOr(self):
            return self.getToken(PrototypeParser.BitOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrExpression" ):
                return visitor.visitBitOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentOperatorExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def assignmentOperator(self):
            return self.getTypedRuleContext(PrototypeParser.AssignmentOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperatorExpression" ):
                listener.enterAssignmentOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperatorExpression" ):
                listener.exitAssignmentOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperatorExpression" ):
                return visitor.visitAssignmentOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class VoidExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Void(self):
            return self.getToken(PrototypeParser.Void, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoidExpression" ):
                listener.enterVoidExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoidExpression" ):
                listener.exitVoidExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVoidExpression" ):
                return visitor.visitVoidExpression(self)
            else:
                return visitor.visitChildren(self)


    class CoalesceExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.SingleExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,i)

        def NullCoalesce(self):
            return self.getToken(PrototypeParser.NullCoalesce, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesceExpression" ):
                listener.enterCoalesceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesceExpression" ):
                listener.exitCoalesceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoalesceExpression" ):
                return visitor.visitCoalesceExpression(self)
            else:
                return visitor.visitChildren(self)



    def singleExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PrototypeParser.SingleExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_singleExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                localctx = PrototypeParser.FunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 782
                self.anonymousFunction()
                pass

            elif la_ == 2:
                localctx = PrototypeParser.ClassExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 783
                self.match(PrototypeParser.Class)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (PrototypeParser.As - 99)) | (1 << (PrototypeParser.From - 99)) | (1 << (PrototypeParser.Of - 99)) | (1 << (PrototypeParser.Yield - 99)) | (1 << (PrototypeParser.Async - 99)) | (1 << (PrototypeParser.NonStrictLet - 99)) | (1 << (PrototypeParser.Identifier - 99)))) != 0):
                    self.state = 784
                    self.identifier()


                self.state = 787
                self.classTail()
                pass

            elif la_ == 3:
                localctx = PrototypeParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 788
                self.match(PrototypeParser.New)
                self.state = 789
                self.identifier()
                self.state = 790
                self.arguments()
                pass

            elif la_ == 4:
                localctx = PrototypeParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 792
                self.match(PrototypeParser.New)
                self.state = 793
                self.singleExpression(0)
                self.state = 794
                self.arguments()
                pass

            elif la_ == 5:
                localctx = PrototypeParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 796
                self.match(PrototypeParser.New)
                self.state = 797
                self.singleExpression(42)
                pass

            elif la_ == 6:
                localctx = PrototypeParser.MetaExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 798
                self.match(PrototypeParser.New)
                self.state = 799
                self.match(PrototypeParser.Dot)
                self.state = 800
                self.identifier()
                pass

            elif la_ == 7:
                localctx = PrototypeParser.DeleteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 801
                self.match(PrototypeParser.Delete)
                self.state = 802
                self.singleExpression(37)
                pass

            elif la_ == 8:
                localctx = PrototypeParser.VoidExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 803
                self.match(PrototypeParser.Void)
                self.state = 804
                self.singleExpression(36)
                pass

            elif la_ == 9:
                localctx = PrototypeParser.TypeofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 805
                self.match(PrototypeParser.Typeof)
                self.state = 806
                self.singleExpression(35)
                pass

            elif la_ == 10:
                localctx = PrototypeParser.PreIncrementExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 807
                self.match(PrototypeParser.PlusPlus)
                self.state = 808
                self.singleExpression(34)
                pass

            elif la_ == 11:
                localctx = PrototypeParser.PreDecreaseExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 809
                self.match(PrototypeParser.MinusMinus)
                self.state = 810
                self.singleExpression(33)
                pass

            elif la_ == 12:
                localctx = PrototypeParser.UnaryPlusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 811
                self.match(PrototypeParser.Plus)
                self.state = 812
                self.singleExpression(32)
                pass

            elif la_ == 13:
                localctx = PrototypeParser.UnaryMinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 813
                self.match(PrototypeParser.Minus)
                self.state = 814
                self.singleExpression(31)
                pass

            elif la_ == 14:
                localctx = PrototypeParser.BitNotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 815
                self.match(PrototypeParser.BitNot)
                self.state = 816
                self.singleExpression(30)
                pass

            elif la_ == 15:
                localctx = PrototypeParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 817
                self.match(PrototypeParser.Not)
                self.state = 818
                self.singleExpression(29)
                pass

            elif la_ == 16:
                localctx = PrototypeParser.AwaitExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 819
                self.match(PrototypeParser.Await)
                self.state = 820
                self.singleExpression(28)
                pass

            elif la_ == 17:
                localctx = PrototypeParser.ImportExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 821
                self.match(PrototypeParser.Import)
                self.state = 822
                self.match(PrototypeParser.OpenParen)
                self.state = 823
                self.singleExpression(0)
                self.state = 824
                self.match(PrototypeParser.CloseParen)
                pass

            elif la_ == 18:
                localctx = PrototypeParser.YieldExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 826
                self.yieldStatement()
                pass

            elif la_ == 19:
                localctx = PrototypeParser.ThisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 827
                self.match(PrototypeParser.This)
                pass

            elif la_ == 20:
                localctx = PrototypeParser.IdentifierExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 828
                self.identifier()
                pass

            elif la_ == 21:
                localctx = PrototypeParser.SuperExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 829
                self.match(PrototypeParser.Super)
                pass

            elif la_ == 22:
                localctx = PrototypeParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 830
                self.literal()
                pass

            elif la_ == 23:
                localctx = PrototypeParser.ArrayLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 831
                self.arrayLiteral()
                pass

            elif la_ == 24:
                localctx = PrototypeParser.ObjectLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 832
                self.objectLiteral()
                pass

            elif la_ == 25:
                localctx = PrototypeParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 833
                self.match(PrototypeParser.OpenParen)
                self.state = 834
                self.expressionSequence()
                self.state = 835
                self.match(PrototypeParser.CloseParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 924
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        localctx = PrototypeParser.OptionalChainExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 839
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 840
                        self.match(PrototypeParser.QuestionMarkDot)
                        self.state = 841
                        self.singleExpression(48)
                        pass

                    elif la_ == 2:
                        localctx = PrototypeParser.PowerExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 842
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 843
                        self.match(PrototypeParser.Power)
                        self.state = 844
                        self.singleExpression(27)
                        pass

                    elif la_ == 3:
                        localctx = PrototypeParser.MultiplicativeExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 845
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 846
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.Multiply) | (1 << PrototypeParser.Divide) | (1 << PrototypeParser.Modulus))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 847
                        self.singleExpression(27)
                        pass

                    elif la_ == 4:
                        localctx = PrototypeParser.AdditiveExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 848
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 849
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PrototypeParser.Plus or _la==PrototypeParser.Minus):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 850
                        self.singleExpression(26)
                        pass

                    elif la_ == 5:
                        localctx = PrototypeParser.CoalesceExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 851
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 852
                        localctx.op = self.match(PrototypeParser.NullCoalesce)
                        self.state = 853
                        self.singleExpression(25)
                        pass

                    elif la_ == 6:
                        localctx = PrototypeParser.BitShiftExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 854
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 855
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.RightShiftArithmetic) | (1 << PrototypeParser.LeftShiftArithmetic) | (1 << PrototypeParser.RightShiftLogical))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 856
                        self.singleExpression(24)
                        pass

                    elif la_ == 7:
                        localctx = PrototypeParser.RelationalExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 857
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 858
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.LessThan) | (1 << PrototypeParser.MoreThan) | (1 << PrototypeParser.LessThanEquals) | (1 << PrototypeParser.GreaterThanEquals))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 859
                        self.singleExpression(23)
                        pass

                    elif la_ == 8:
                        localctx = PrototypeParser.InstanceofExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 860
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 861
                        localctx.op = self.match(PrototypeParser.Instanceof)
                        self.state = 862
                        self.singleExpression(22)
                        pass

                    elif la_ == 9:
                        localctx = PrototypeParser.InExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 863
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 864
                        localctx.op = self.match(PrototypeParser.In)
                        self.state = 865
                        self.singleExpression(21)
                        pass

                    elif la_ == 10:
                        localctx = PrototypeParser.EqualityExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 866
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 867
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.Equals_) | (1 << PrototypeParser.NotEquals) | (1 << PrototypeParser.IdentityEquals) | (1 << PrototypeParser.IdentityNotEquals))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 868
                        self.singleExpression(20)
                        pass

                    elif la_ == 11:
                        localctx = PrototypeParser.BitAndExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 869
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 870
                        localctx.op = self.match(PrototypeParser.BitAnd)
                        self.state = 871
                        self.singleExpression(19)
                        pass

                    elif la_ == 12:
                        localctx = PrototypeParser.BitXOrExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 872
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 873
                        localctx.op = self.match(PrototypeParser.BitXOr)
                        self.state = 874
                        self.singleExpression(18)
                        pass

                    elif la_ == 13:
                        localctx = PrototypeParser.BitOrExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 875
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 876
                        localctx.op = self.match(PrototypeParser.BitOr)
                        self.state = 877
                        self.singleExpression(17)
                        pass

                    elif la_ == 14:
                        localctx = PrototypeParser.LogicalAndExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 878
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 879
                        localctx.op = self.match(PrototypeParser.And)
                        self.state = 880
                        self.singleExpression(16)
                        pass

                    elif la_ == 15:
                        localctx = PrototypeParser.LogicalOrExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 881
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 882
                        localctx.op = self.match(PrototypeParser.Or)
                        self.state = 883
                        self.singleExpression(15)
                        pass

                    elif la_ == 16:
                        localctx = PrototypeParser.TernaryExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 884
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 885
                        self.match(PrototypeParser.QuestionMark)
                        self.state = 886
                        self.singleExpression(0)
                        self.state = 887
                        self.match(PrototypeParser.Colon)
                        self.state = 888
                        self.singleExpression(14)
                        pass

                    elif la_ == 17:
                        localctx = PrototypeParser.AssignmentExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 890
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 891
                        self.match(PrototypeParser.Assign)
                        self.state = 892
                        self.singleExpression(12)
                        pass

                    elif la_ == 18:
                        localctx = PrototypeParser.AssignmentOperatorExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 893
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 894
                        self.assignmentOperator()
                        self.state = 895
                        self.singleExpression(11)
                        pass

                    elif la_ == 19:
                        localctx = PrototypeParser.MemberIndexExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 897
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 899
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PrototypeParser.QuestionMarkDot:
                            self.state = 898
                            self.match(PrototypeParser.QuestionMarkDot)


                        self.state = 901
                        self.match(PrototypeParser.OpenBracket)
                        self.state = 902
                        self.expressionSequence()
                        self.state = 903
                        self.match(PrototypeParser.CloseBracket)
                        pass

                    elif la_ == 20:
                        localctx = PrototypeParser.MemberDotExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 905
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 907
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PrototypeParser.QuestionMark:
                            self.state = 906
                            self.match(PrototypeParser.QuestionMark)


                        self.state = 909
                        self.match(PrototypeParser.Dot)
                        self.state = 911
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PrototypeParser.Hashtag:
                            self.state = 910
                            self.match(PrototypeParser.Hashtag)


                        self.state = 913
                        self.identifierName()
                        pass

                    elif la_ == 21:
                        localctx = PrototypeParser.ArgumentsExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 914
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 915
                        self.arguments()
                        pass

                    elif la_ == 22:
                        localctx = PrototypeParser.PostIncrementExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 916
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 917
                        if not self.notLineTerminator():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.notLineTerminator()")
                        self.state = 918
                        self.match(PrototypeParser.PlusPlus)
                        pass

                    elif la_ == 23:
                        localctx = PrototypeParser.PostDecreaseExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 919
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 920
                        if not self.notLineTerminator():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.notLineTerminator()")
                        self.state = 921
                        self.match(PrototypeParser.MinusMinus)
                        pass

                    elif la_ == 24:
                        localctx = PrototypeParser.TemplateStringExpressionContext(self, PrototypeParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 922
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 923
                        self.templateStringLiteral()
                        pass

             
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(PrototypeParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = PrototypeParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.match(PrototypeParser.Assign)
            self.state = 930
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(PrototypeParser.KeywordContext,0)


        def arrayLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.ArrayLiteralContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.ObjectLiteralContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_assignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignable" ):
                listener.enterAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignable" ):
                listener.exitAssignable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignable" ):
                return visitor.visitAssignable(self)
            else:
                return visitor.visitChildren(self)




    def assignable(self):

        localctx = PrototypeParser.AssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_assignable)
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 932
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 934
                self.arrayLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 935
                self.objectLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(PrototypeParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(PrototypeParser.CloseBrace, 0)

        def propertyAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.PropertyAssignmentContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.PropertyAssignmentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.Comma)
            else:
                return self.getToken(PrototypeParser.Comma, i)

        def getRuleIndex(self):
            return PrototypeParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteral" ):
                return visitor.visitObjectLiteral(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteral(self):

        localctx = PrototypeParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(PrototypeParser.OpenBrace)
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 939
                self.propertyAssignment()
                self.state = 944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 940
                        self.match(PrototypeParser.Comma)
                        self.state = 941
                        self.propertyAssignment() 
                    self.state = 946
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Comma:
                    self.state = 947
                    self.match(PrototypeParser.Comma)




            self.state = 952
            self.match(PrototypeParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnonymousFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrototypeParser.RULE_anonymousFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AnonymousFunctionDeclContext(AnonymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.AnonymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Function_(self):
            return self.getToken(PrototypeParser.Function_, 0)
        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)
        def functionBody(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionBodyContext,0)

        def Async(self):
            return self.getToken(PrototypeParser.Async, 0)
        def Multiply(self):
            return self.getToken(PrototypeParser.Multiply, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(PrototypeParser.FormalParameterListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousFunctionDecl" ):
                listener.enterAnonymousFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousFunctionDecl" ):
                listener.exitAnonymousFunctionDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnonymousFunctionDecl" ):
                return visitor.visitAnonymousFunctionDecl(self)
            else:
                return visitor.visitChildren(self)


    class ArrowFunctionContext(AnonymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.AnonymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrowFunctionParameters(self):
            return self.getTypedRuleContext(PrototypeParser.ArrowFunctionParametersContext,0)

        def ARROW(self):
            return self.getToken(PrototypeParser.ARROW, 0)
        def arrowFunctionBody(self):
            return self.getTypedRuleContext(PrototypeParser.ArrowFunctionBodyContext,0)

        def Async(self):
            return self.getToken(PrototypeParser.Async, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunction" ):
                listener.enterArrowFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunction" ):
                listener.exitArrowFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrowFunction" ):
                return visitor.visitArrowFunction(self)
            else:
                return visitor.visitChildren(self)


    class NamedFunctionContext(AnonymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrototypeParser.AnonymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclaration(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedFunction" ):
                listener.enterNamedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedFunction" ):
                listener.exitNamedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedFunction" ):
                return visitor.visitNamedFunction(self)
            else:
                return visitor.visitChildren(self)



    def anonymousFunction(self):

        localctx = PrototypeParser.AnonymousFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_anonymousFunction)
        self._la = 0 # Token type
        try:
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                localctx = PrototypeParser.NamedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.functionDeclaration()
                pass

            elif la_ == 2:
                localctx = PrototypeParser.AnonymousFunctionDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Async:
                    self.state = 955
                    self.match(PrototypeParser.Async)


                self.state = 958
                self.match(PrototypeParser.Function_)
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrototypeParser.Multiply:
                    self.state = 959
                    self.match(PrototypeParser.Multiply)


                self.state = 962
                self.match(PrototypeParser.OpenParen)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.Ellipsis))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (PrototypeParser.Break - 73)) | (1 << (PrototypeParser.Do - 73)) | (1 << (PrototypeParser.Instanceof - 73)) | (1 << (PrototypeParser.Typeof - 73)) | (1 << (PrototypeParser.Case - 73)) | (1 << (PrototypeParser.Else - 73)) | (1 << (PrototypeParser.New - 73)) | (1 << (PrototypeParser.Var - 73)) | (1 << (PrototypeParser.Catch - 73)) | (1 << (PrototypeParser.Finally - 73)) | (1 << (PrototypeParser.Return - 73)) | (1 << (PrototypeParser.Void - 73)) | (1 << (PrototypeParser.Continue - 73)) | (1 << (PrototypeParser.For - 73)) | (1 << (PrototypeParser.Switch - 73)) | (1 << (PrototypeParser.While - 73)) | (1 << (PrototypeParser.Debugger - 73)) | (1 << (PrototypeParser.Function_ - 73)) | (1 << (PrototypeParser.This - 73)) | (1 << (PrototypeParser.With - 73)) | (1 << (PrototypeParser.Default - 73)) | (1 << (PrototypeParser.If - 73)) | (1 << (PrototypeParser.Throw - 73)) | (1 << (PrototypeParser.Delete - 73)) | (1 << (PrototypeParser.In - 73)) | (1 << (PrototypeParser.Try - 73)) | (1 << (PrototypeParser.As - 73)) | (1 << (PrototypeParser.From - 73)) | (1 << (PrototypeParser.Of - 73)) | (1 << (PrototypeParser.Yield - 73)) | (1 << (PrototypeParser.YieldStar - 73)) | (1 << (PrototypeParser.Class - 73)) | (1 << (PrototypeParser.Enum - 73)) | (1 << (PrototypeParser.Extends - 73)) | (1 << (PrototypeParser.Super - 73)) | (1 << (PrototypeParser.Const - 73)) | (1 << (PrototypeParser.Export - 73)) | (1 << (PrototypeParser.Import - 73)) | (1 << (PrototypeParser.Async - 73)) | (1 << (PrototypeParser.Await - 73)) | (1 << (PrototypeParser.Implements - 73)) | (1 << (PrototypeParser.StrictLet - 73)) | (1 << (PrototypeParser.NonStrictLet - 73)) | (1 << (PrototypeParser.Private - 73)) | (1 << (PrototypeParser.Public - 73)) | (1 << (PrototypeParser.Interface - 73)) | (1 << (PrototypeParser.Package - 73)) | (1 << (PrototypeParser.Protected - 73)) | (1 << (PrototypeParser.Static - 73)) | (1 << (PrototypeParser.Identifier - 73)))) != 0):
                    self.state = 963
                    self.formalParameterList()


                self.state = 966
                self.match(PrototypeParser.CloseParen)
                self.state = 967
                self.functionBody()
                pass

            elif la_ == 3:
                localctx = PrototypeParser.ArrowFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 969
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 968
                    self.match(PrototypeParser.Async)


                self.state = 971
                self.arrowFunctionParameters()
                self.state = 972
                self.match(PrototypeParser.ARROW)
                self.state = 973
                self.arrowFunctionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrowFunctionParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyName(self):
            return self.getTypedRuleContext(PrototypeParser.PropertyNameContext,0)


        def OpenParen(self):
            return self.getToken(PrototypeParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(PrototypeParser.CloseParen, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PrototypeParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_arrowFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionParameters" ):
                listener.enterArrowFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionParameters" ):
                listener.exitArrowFunctionParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrowFunctionParameters" ):
                return visitor.visitArrowFunctionParameters(self)
            else:
                return visitor.visitChildren(self)




    def arrowFunctionParameters(self):

        localctx = PrototypeParser.ArrowFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_arrowFunctionParameters)
        self._la = 0 # Token type
        try:
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.OpenBracket, PrototypeParser.NullLiteral, PrototypeParser.BooleanLiteral, PrototypeParser.DecimalLiteral, PrototypeParser.HexIntegerLiteral, PrototypeParser.OctalIntegerLiteral, PrototypeParser.OctalIntegerLiteral2, PrototypeParser.BinaryIntegerLiteral, PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static, PrototypeParser.Identifier, PrototypeParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.propertyName()
                pass
            elif token in [PrototypeParser.OpenParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.match(PrototypeParser.OpenParen)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.OpenBracket) | (1 << PrototypeParser.OpenBrace) | (1 << PrototypeParser.Ellipsis))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (PrototypeParser.Break - 73)) | (1 << (PrototypeParser.Do - 73)) | (1 << (PrototypeParser.Instanceof - 73)) | (1 << (PrototypeParser.Typeof - 73)) | (1 << (PrototypeParser.Case - 73)) | (1 << (PrototypeParser.Else - 73)) | (1 << (PrototypeParser.New - 73)) | (1 << (PrototypeParser.Var - 73)) | (1 << (PrototypeParser.Catch - 73)) | (1 << (PrototypeParser.Finally - 73)) | (1 << (PrototypeParser.Return - 73)) | (1 << (PrototypeParser.Void - 73)) | (1 << (PrototypeParser.Continue - 73)) | (1 << (PrototypeParser.For - 73)) | (1 << (PrototypeParser.Switch - 73)) | (1 << (PrototypeParser.While - 73)) | (1 << (PrototypeParser.Debugger - 73)) | (1 << (PrototypeParser.Function_ - 73)) | (1 << (PrototypeParser.This - 73)) | (1 << (PrototypeParser.With - 73)) | (1 << (PrototypeParser.Default - 73)) | (1 << (PrototypeParser.If - 73)) | (1 << (PrototypeParser.Throw - 73)) | (1 << (PrototypeParser.Delete - 73)) | (1 << (PrototypeParser.In - 73)) | (1 << (PrototypeParser.Try - 73)) | (1 << (PrototypeParser.As - 73)) | (1 << (PrototypeParser.From - 73)) | (1 << (PrototypeParser.Of - 73)) | (1 << (PrototypeParser.Yield - 73)) | (1 << (PrototypeParser.YieldStar - 73)) | (1 << (PrototypeParser.Class - 73)) | (1 << (PrototypeParser.Enum - 73)) | (1 << (PrototypeParser.Extends - 73)) | (1 << (PrototypeParser.Super - 73)) | (1 << (PrototypeParser.Const - 73)) | (1 << (PrototypeParser.Export - 73)) | (1 << (PrototypeParser.Import - 73)) | (1 << (PrototypeParser.Async - 73)) | (1 << (PrototypeParser.Await - 73)) | (1 << (PrototypeParser.Implements - 73)) | (1 << (PrototypeParser.StrictLet - 73)) | (1 << (PrototypeParser.NonStrictLet - 73)) | (1 << (PrototypeParser.Private - 73)) | (1 << (PrototypeParser.Public - 73)) | (1 << (PrototypeParser.Interface - 73)) | (1 << (PrototypeParser.Package - 73)) | (1 << (PrototypeParser.Protected - 73)) | (1 << (PrototypeParser.Static - 73)) | (1 << (PrototypeParser.Identifier - 73)))) != 0):
                    self.state = 979
                    self.formalParameterList()


                self.state = 982
                self.match(PrototypeParser.CloseParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrowFunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(PrototypeParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_arrowFunctionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionBody" ):
                listener.enterArrowFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionBody" ):
                listener.exitArrowFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrowFunctionBody" ):
                return visitor.visitArrowFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def arrowFunctionBody(self):

        localctx = PrototypeParser.ArrowFunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_arrowFunctionBody)
        try:
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiplyAssign(self):
            return self.getToken(PrototypeParser.MultiplyAssign, 0)

        def DivideAssign(self):
            return self.getToken(PrototypeParser.DivideAssign, 0)

        def ModulusAssign(self):
            return self.getToken(PrototypeParser.ModulusAssign, 0)

        def PlusAssign(self):
            return self.getToken(PrototypeParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(PrototypeParser.MinusAssign, 0)

        def LeftShiftArithmeticAssign(self):
            return self.getToken(PrototypeParser.LeftShiftArithmeticAssign, 0)

        def RightShiftArithmeticAssign(self):
            return self.getToken(PrototypeParser.RightShiftArithmeticAssign, 0)

        def RightShiftLogicalAssign(self):
            return self.getToken(PrototypeParser.RightShiftLogicalAssign, 0)

        def BitAndAssign(self):
            return self.getToken(PrototypeParser.BitAndAssign, 0)

        def BitXorAssign(self):
            return self.getToken(PrototypeParser.BitXorAssign, 0)

        def BitOrAssign(self):
            return self.getToken(PrototypeParser.BitOrAssign, 0)

        def PowerAssign(self):
            return self.getToken(PrototypeParser.PowerAssign, 0)

        def NullishCoalescingAssign(self):
            return self.getToken(PrototypeParser.NullishCoalescingAssign, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = PrototypeParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrototypeParser.MultiplyAssign) | (1 << PrototypeParser.DivideAssign) | (1 << PrototypeParser.ModulusAssign) | (1 << PrototypeParser.PlusAssign) | (1 << PrototypeParser.MinusAssign) | (1 << PrototypeParser.LeftShiftArithmeticAssign) | (1 << PrototypeParser.RightShiftArithmeticAssign) | (1 << PrototypeParser.RightShiftLogicalAssign) | (1 << PrototypeParser.BitAndAssign) | (1 << PrototypeParser.BitXorAssign) | (1 << PrototypeParser.BitOrAssign) | (1 << PrototypeParser.PowerAssign) | (1 << PrototypeParser.NullishCoalescingAssign))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NullLiteral(self):
            return self.getToken(PrototypeParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(PrototypeParser.BooleanLiteral, 0)

        def StringLiteral(self):
            return self.getToken(PrototypeParser.StringLiteral, 0)

        def templateStringLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.TemplateStringLiteralContext,0)


        def RegularExpressionLiteral(self):
            return self.getToken(PrototypeParser.RegularExpressionLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.NumericLiteralContext,0)


        def bigintLiteral(self):
            return self.getTypedRuleContext(PrototypeParser.BigintLiteralContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = PrototypeParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_literal)
        try:
            self.state = 998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.NullLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 991
                self.match(PrototypeParser.NullLiteral)
                pass
            elif token in [PrototypeParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 992
                self.match(PrototypeParser.BooleanLiteral)
                pass
            elif token in [PrototypeParser.StringLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 993
                self.match(PrototypeParser.StringLiteral)
                pass
            elif token in [PrototypeParser.BackTick]:
                self.enterOuterAlt(localctx, 4)
                self.state = 994
                self.templateStringLiteral()
                pass
            elif token in [PrototypeParser.RegularExpressionLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 995
                self.match(PrototypeParser.RegularExpressionLiteral)
                pass
            elif token in [PrototypeParser.DecimalLiteral, PrototypeParser.HexIntegerLiteral, PrototypeParser.OctalIntegerLiteral, PrototypeParser.OctalIntegerLiteral2, PrototypeParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 996
                self.numericLiteral()
                pass
            elif token in [PrototypeParser.BigHexIntegerLiteral, PrototypeParser.BigOctalIntegerLiteral, PrototypeParser.BigBinaryIntegerLiteral, PrototypeParser.BigDecimalIntegerLiteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 997
                self.bigintLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateStringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BackTick(self, i:int=None):
            if i is None:
                return self.getTokens(PrototypeParser.BackTick)
            else:
                return self.getToken(PrototypeParser.BackTick, i)

        def templateStringAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrototypeParser.TemplateStringAtomContext)
            else:
                return self.getTypedRuleContext(PrototypeParser.TemplateStringAtomContext,i)


        def getRuleIndex(self):
            return PrototypeParser.RULE_templateStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringLiteral" ):
                listener.enterTemplateStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringLiteral" ):
                listener.exitTemplateStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateStringLiteral" ):
                return visitor.visitTemplateStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def templateStringLiteral(self):

        localctx = PrototypeParser.TemplateStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_templateStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(PrototypeParser.BackTick)
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PrototypeParser.TemplateStringStartExpression or _la==PrototypeParser.TemplateStringAtom:
                self.state = 1001
                self.templateStringAtom()
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1007
            self.match(PrototypeParser.BackTick)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateStringAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TemplateStringAtom(self):
            return self.getToken(PrototypeParser.TemplateStringAtom, 0)

        def TemplateStringStartExpression(self):
            return self.getToken(PrototypeParser.TemplateStringStartExpression, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(PrototypeParser.SingleExpressionContext,0)


        def TemplateCloseBrace(self):
            return self.getToken(PrototypeParser.TemplateCloseBrace, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_templateStringAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringAtom" ):
                listener.enterTemplateStringAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringAtom" ):
                listener.exitTemplateStringAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateStringAtom" ):
                return visitor.visitTemplateStringAtom(self)
            else:
                return visitor.visitChildren(self)




    def templateStringAtom(self):

        localctx = PrototypeParser.TemplateStringAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_templateStringAtom)
        try:
            self.state = 1014
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.TemplateStringAtom]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.match(PrototypeParser.TemplateStringAtom)
                pass
            elif token in [PrototypeParser.TemplateStringStartExpression]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.match(PrototypeParser.TemplateStringStartExpression)
                self.state = 1011
                self.singleExpression(0)
                self.state = 1012
                self.match(PrototypeParser.TemplateCloseBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalLiteral(self):
            return self.getToken(PrototypeParser.DecimalLiteral, 0)

        def HexIntegerLiteral(self):
            return self.getToken(PrototypeParser.HexIntegerLiteral, 0)

        def OctalIntegerLiteral(self):
            return self.getToken(PrototypeParser.OctalIntegerLiteral, 0)

        def OctalIntegerLiteral2(self):
            return self.getToken(PrototypeParser.OctalIntegerLiteral2, 0)

        def BinaryIntegerLiteral(self):
            return self.getToken(PrototypeParser.BinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numericLiteral(self):

        localctx = PrototypeParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_numericLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrototypeParser.DecimalLiteral - 64)) | (1 << (PrototypeParser.HexIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral - 64)) | (1 << (PrototypeParser.OctalIntegerLiteral2 - 64)) | (1 << (PrototypeParser.BinaryIntegerLiteral - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BigintLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BigDecimalIntegerLiteral(self):
            return self.getToken(PrototypeParser.BigDecimalIntegerLiteral, 0)

        def BigHexIntegerLiteral(self):
            return self.getToken(PrototypeParser.BigHexIntegerLiteral, 0)

        def BigOctalIntegerLiteral(self):
            return self.getToken(PrototypeParser.BigOctalIntegerLiteral, 0)

        def BigBinaryIntegerLiteral(self):
            return self.getToken(PrototypeParser.BigBinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_bigintLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigintLiteral" ):
                listener.enterBigintLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigintLiteral" ):
                listener.exitBigintLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigintLiteral" ):
                return visitor.visitBigintLiteral(self)
            else:
                return visitor.visitChildren(self)




    def bigintLiteral(self):

        localctx = PrototypeParser.BigintLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_bigintLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (PrototypeParser.BigHexIntegerLiteral - 69)) | (1 << (PrototypeParser.BigOctalIntegerLiteral - 69)) | (1 << (PrototypeParser.BigBinaryIntegerLiteral - 69)) | (1 << (PrototypeParser.BigDecimalIntegerLiteral - 69)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def classElementName(self):
            return self.getTypedRuleContext(PrototypeParser.ClassElementNameContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter" ):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)




    def getter(self):

        localctx = PrototypeParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_getter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            if not self.n("get"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.n(\"get\")")
            self.state = 1021
            self.identifier()
            self.state = 1022
            self.classElementName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def classElementName(self):
            return self.getTypedRuleContext(PrototypeParser.ClassElementNameContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter" ):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)




    def setter(self):

        localctx = PrototypeParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_setter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            if not self.n("set"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.n(\"set\")")
            self.state = 1025
            self.identifier()
            self.state = 1026
            self.classElementName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrototypeParser.IdentifierContext,0)


        def reservedWord(self):
            return self.getTypedRuleContext(PrototypeParser.ReservedWordContext,0)


        def getRuleIndex(self):
            return PrototypeParser.RULE_identifierName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierName" ):
                listener.enterIdentifierName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierName" ):
                listener.exitIdentifierName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierName" ):
                return visitor.visitIdentifierName(self)
            else:
                return visitor.visitChildren(self)




    def identifierName(self):

        localctx = PrototypeParser.IdentifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_identifierName)
        try:
            self.state = 1030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.reservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(PrototypeParser.Identifier, 0)

        def NonStrictLet(self):
            return self.getToken(PrototypeParser.NonStrictLet, 0)

        def Async(self):
            return self.getToken(PrototypeParser.Async, 0)

        def As(self):
            return self.getToken(PrototypeParser.As, 0)

        def From(self):
            return self.getToken(PrototypeParser.From, 0)

        def Yield(self):
            return self.getToken(PrototypeParser.Yield, 0)

        def Of(self):
            return self.getToken(PrototypeParser.Of, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = PrototypeParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            _la = self._input.LA(1)
            if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (PrototypeParser.As - 99)) | (1 << (PrototypeParser.From - 99)) | (1 << (PrototypeParser.Of - 99)) | (1 << (PrototypeParser.Yield - 99)) | (1 << (PrototypeParser.Async - 99)) | (1 << (PrototypeParser.NonStrictLet - 99)) | (1 << (PrototypeParser.Identifier - 99)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservedWordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(PrototypeParser.KeywordContext,0)


        def NullLiteral(self):
            return self.getToken(PrototypeParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(PrototypeParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_reservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedWord" ):
                listener.enterReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedWord" ):
                listener.exitReservedWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedWord" ):
                return visitor.visitReservedWord(self)
            else:
                return visitor.visitChildren(self)




    def reservedWord(self):

        localctx = PrototypeParser.ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_reservedWord)
        try:
            self.state = 1037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.Break, PrototypeParser.Do, PrototypeParser.Instanceof, PrototypeParser.Typeof, PrototypeParser.Case, PrototypeParser.Else, PrototypeParser.New, PrototypeParser.Var, PrototypeParser.Catch, PrototypeParser.Finally, PrototypeParser.Return, PrototypeParser.Void, PrototypeParser.Continue, PrototypeParser.For, PrototypeParser.Switch, PrototypeParser.While, PrototypeParser.Debugger, PrototypeParser.Function_, PrototypeParser.This, PrototypeParser.With, PrototypeParser.Default, PrototypeParser.If, PrototypeParser.Throw, PrototypeParser.Delete, PrototypeParser.In, PrototypeParser.Try, PrototypeParser.As, PrototypeParser.From, PrototypeParser.Of, PrototypeParser.Yield, PrototypeParser.YieldStar, PrototypeParser.Class, PrototypeParser.Enum, PrototypeParser.Extends, PrototypeParser.Super, PrototypeParser.Const, PrototypeParser.Export, PrototypeParser.Import, PrototypeParser.Async, PrototypeParser.Await, PrototypeParser.Implements, PrototypeParser.StrictLet, PrototypeParser.NonStrictLet, PrototypeParser.Private, PrototypeParser.Public, PrototypeParser.Interface, PrototypeParser.Package, PrototypeParser.Protected, PrototypeParser.Static]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.keyword()
                pass
            elif token in [PrototypeParser.NullLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(PrototypeParser.NullLiteral)
                pass
            elif token in [PrototypeParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1036
                self.match(PrototypeParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(PrototypeParser.Break, 0)

        def Do(self):
            return self.getToken(PrototypeParser.Do, 0)

        def Instanceof(self):
            return self.getToken(PrototypeParser.Instanceof, 0)

        def Typeof(self):
            return self.getToken(PrototypeParser.Typeof, 0)

        def Case(self):
            return self.getToken(PrototypeParser.Case, 0)

        def Else(self):
            return self.getToken(PrototypeParser.Else, 0)

        def New(self):
            return self.getToken(PrototypeParser.New, 0)

        def Var(self):
            return self.getToken(PrototypeParser.Var, 0)

        def Catch(self):
            return self.getToken(PrototypeParser.Catch, 0)

        def Finally(self):
            return self.getToken(PrototypeParser.Finally, 0)

        def Return(self):
            return self.getToken(PrototypeParser.Return, 0)

        def Void(self):
            return self.getToken(PrototypeParser.Void, 0)

        def Continue(self):
            return self.getToken(PrototypeParser.Continue, 0)

        def For(self):
            return self.getToken(PrototypeParser.For, 0)

        def Switch(self):
            return self.getToken(PrototypeParser.Switch, 0)

        def While(self):
            return self.getToken(PrototypeParser.While, 0)

        def Debugger(self):
            return self.getToken(PrototypeParser.Debugger, 0)

        def Function_(self):
            return self.getToken(PrototypeParser.Function_, 0)

        def This(self):
            return self.getToken(PrototypeParser.This, 0)

        def With(self):
            return self.getToken(PrototypeParser.With, 0)

        def Default(self):
            return self.getToken(PrototypeParser.Default, 0)

        def If(self):
            return self.getToken(PrototypeParser.If, 0)

        def Throw(self):
            return self.getToken(PrototypeParser.Throw, 0)

        def Delete(self):
            return self.getToken(PrototypeParser.Delete, 0)

        def In(self):
            return self.getToken(PrototypeParser.In, 0)

        def Try(self):
            return self.getToken(PrototypeParser.Try, 0)

        def Class(self):
            return self.getToken(PrototypeParser.Class, 0)

        def Enum(self):
            return self.getToken(PrototypeParser.Enum, 0)

        def Extends(self):
            return self.getToken(PrototypeParser.Extends, 0)

        def Super(self):
            return self.getToken(PrototypeParser.Super, 0)

        def Const(self):
            return self.getToken(PrototypeParser.Const, 0)

        def Export(self):
            return self.getToken(PrototypeParser.Export, 0)

        def Import(self):
            return self.getToken(PrototypeParser.Import, 0)

        def Implements(self):
            return self.getToken(PrototypeParser.Implements, 0)

        def let_(self):
            return self.getTypedRuleContext(PrototypeParser.Let_Context,0)


        def Private(self):
            return self.getToken(PrototypeParser.Private, 0)

        def Public(self):
            return self.getToken(PrototypeParser.Public, 0)

        def Interface(self):
            return self.getToken(PrototypeParser.Interface, 0)

        def Package(self):
            return self.getToken(PrototypeParser.Package, 0)

        def Protected(self):
            return self.getToken(PrototypeParser.Protected, 0)

        def Static(self):
            return self.getToken(PrototypeParser.Static, 0)

        def Yield(self):
            return self.getToken(PrototypeParser.Yield, 0)

        def YieldStar(self):
            return self.getToken(PrototypeParser.YieldStar, 0)

        def Async(self):
            return self.getToken(PrototypeParser.Async, 0)

        def Await(self):
            return self.getToken(PrototypeParser.Await, 0)

        def From(self):
            return self.getToken(PrototypeParser.From, 0)

        def As(self):
            return self.getToken(PrototypeParser.As, 0)

        def Of(self):
            return self.getToken(PrototypeParser.Of, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = PrototypeParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_keyword)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrototypeParser.Break]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(PrototypeParser.Break)
                pass
            elif token in [PrototypeParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.match(PrototypeParser.Do)
                pass
            elif token in [PrototypeParser.Instanceof]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1041
                self.match(PrototypeParser.Instanceof)
                pass
            elif token in [PrototypeParser.Typeof]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1042
                self.match(PrototypeParser.Typeof)
                pass
            elif token in [PrototypeParser.Case]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1043
                self.match(PrototypeParser.Case)
                pass
            elif token in [PrototypeParser.Else]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1044
                self.match(PrototypeParser.Else)
                pass
            elif token in [PrototypeParser.New]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1045
                self.match(PrototypeParser.New)
                pass
            elif token in [PrototypeParser.Var]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1046
                self.match(PrototypeParser.Var)
                pass
            elif token in [PrototypeParser.Catch]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1047
                self.match(PrototypeParser.Catch)
                pass
            elif token in [PrototypeParser.Finally]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1048
                self.match(PrototypeParser.Finally)
                pass
            elif token in [PrototypeParser.Return]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1049
                self.match(PrototypeParser.Return)
                pass
            elif token in [PrototypeParser.Void]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1050
                self.match(PrototypeParser.Void)
                pass
            elif token in [PrototypeParser.Continue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1051
                self.match(PrototypeParser.Continue)
                pass
            elif token in [PrototypeParser.For]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1052
                self.match(PrototypeParser.For)
                pass
            elif token in [PrototypeParser.Switch]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1053
                self.match(PrototypeParser.Switch)
                pass
            elif token in [PrototypeParser.While]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1054
                self.match(PrototypeParser.While)
                pass
            elif token in [PrototypeParser.Debugger]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1055
                self.match(PrototypeParser.Debugger)
                pass
            elif token in [PrototypeParser.Function_]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1056
                self.match(PrototypeParser.Function_)
                pass
            elif token in [PrototypeParser.This]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1057
                self.match(PrototypeParser.This)
                pass
            elif token in [PrototypeParser.With]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1058
                self.match(PrototypeParser.With)
                pass
            elif token in [PrototypeParser.Default]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1059
                self.match(PrototypeParser.Default)
                pass
            elif token in [PrototypeParser.If]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1060
                self.match(PrototypeParser.If)
                pass
            elif token in [PrototypeParser.Throw]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1061
                self.match(PrototypeParser.Throw)
                pass
            elif token in [PrototypeParser.Delete]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1062
                self.match(PrototypeParser.Delete)
                pass
            elif token in [PrototypeParser.In]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1063
                self.match(PrototypeParser.In)
                pass
            elif token in [PrototypeParser.Try]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1064
                self.match(PrototypeParser.Try)
                pass
            elif token in [PrototypeParser.Class]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1065
                self.match(PrototypeParser.Class)
                pass
            elif token in [PrototypeParser.Enum]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1066
                self.match(PrototypeParser.Enum)
                pass
            elif token in [PrototypeParser.Extends]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1067
                self.match(PrototypeParser.Extends)
                pass
            elif token in [PrototypeParser.Super]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1068
                self.match(PrototypeParser.Super)
                pass
            elif token in [PrototypeParser.Const]:
                self.enterOuterAlt(localctx, 31)
                self.state = 1069
                self.match(PrototypeParser.Const)
                pass
            elif token in [PrototypeParser.Export]:
                self.enterOuterAlt(localctx, 32)
                self.state = 1070
                self.match(PrototypeParser.Export)
                pass
            elif token in [PrototypeParser.Import]:
                self.enterOuterAlt(localctx, 33)
                self.state = 1071
                self.match(PrototypeParser.Import)
                pass
            elif token in [PrototypeParser.Implements]:
                self.enterOuterAlt(localctx, 34)
                self.state = 1072
                self.match(PrototypeParser.Implements)
                pass
            elif token in [PrototypeParser.StrictLet, PrototypeParser.NonStrictLet]:
                self.enterOuterAlt(localctx, 35)
                self.state = 1073
                self.let_()
                pass
            elif token in [PrototypeParser.Private]:
                self.enterOuterAlt(localctx, 36)
                self.state = 1074
                self.match(PrototypeParser.Private)
                pass
            elif token in [PrototypeParser.Public]:
                self.enterOuterAlt(localctx, 37)
                self.state = 1075
                self.match(PrototypeParser.Public)
                pass
            elif token in [PrototypeParser.Interface]:
                self.enterOuterAlt(localctx, 38)
                self.state = 1076
                self.match(PrototypeParser.Interface)
                pass
            elif token in [PrototypeParser.Package]:
                self.enterOuterAlt(localctx, 39)
                self.state = 1077
                self.match(PrototypeParser.Package)
                pass
            elif token in [PrototypeParser.Protected]:
                self.enterOuterAlt(localctx, 40)
                self.state = 1078
                self.match(PrototypeParser.Protected)
                pass
            elif token in [PrototypeParser.Static]:
                self.enterOuterAlt(localctx, 41)
                self.state = 1079
                self.match(PrototypeParser.Static)
                pass
            elif token in [PrototypeParser.Yield]:
                self.enterOuterAlt(localctx, 42)
                self.state = 1080
                self.match(PrototypeParser.Yield)
                pass
            elif token in [PrototypeParser.YieldStar]:
                self.enterOuterAlt(localctx, 43)
                self.state = 1081
                self.match(PrototypeParser.YieldStar)
                pass
            elif token in [PrototypeParser.Async]:
                self.enterOuterAlt(localctx, 44)
                self.state = 1082
                self.match(PrototypeParser.Async)
                pass
            elif token in [PrototypeParser.Await]:
                self.enterOuterAlt(localctx, 45)
                self.state = 1083
                self.match(PrototypeParser.Await)
                pass
            elif token in [PrototypeParser.From]:
                self.enterOuterAlt(localctx, 46)
                self.state = 1084
                self.match(PrototypeParser.From)
                pass
            elif token in [PrototypeParser.As]:
                self.enterOuterAlt(localctx, 47)
                self.state = 1085
                self.match(PrototypeParser.As)
                pass
            elif token in [PrototypeParser.Of]:
                self.enterOuterAlt(localctx, 48)
                self.state = 1086
                self.match(PrototypeParser.Of)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Let_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NonStrictLet(self):
            return self.getToken(PrototypeParser.NonStrictLet, 0)

        def StrictLet(self):
            return self.getToken(PrototypeParser.StrictLet, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_let_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet_" ):
                listener.enterLet_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet_" ):
                listener.exitLet_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLet_" ):
                return visitor.visitLet_(self)
            else:
                return visitor.visitChildren(self)




    def let_(self):

        localctx = PrototypeParser.Let_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_let_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            _la = self._input.LA(1)
            if not(_la==PrototypeParser.StrictLet or _la==PrototypeParser.NonStrictLet):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PrototypeParser.SemiColon, 0)

        def EOF(self):
            return self.getToken(PrototypeParser.EOF, 0)

        def getRuleIndex(self):
            return PrototypeParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = PrototypeParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_eos)
        try:
            self.state = 1095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.match(PrototypeParser.SemiColon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.match(PrototypeParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1093
                if not self.lineTerminatorAhead():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.lineTerminatorAhead()")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1094
                if not self.closeBrace():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.closeBrace()")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.expressionStatement_sempred
        self._predicates[28] = self.continueStatement_sempred
        self._predicates[29] = self.breakStatement_sempred
        self._predicates[30] = self.returnStatement_sempred
        self._predicates[31] = self.yieldStatement_sempred
        self._predicates[39] = self.throwStatement_sempred
        self._predicates[47] = self.classElement_sempred
        self._predicates[48] = self.methodDefinition_sempred
        self._predicates[65] = self.singleExpression_sempred
        self._predicates[78] = self.getter_sempred
        self._predicates[79] = self.setter_sempred
        self._predicates[85] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expressionStatement_sempred(self, localctx:ExpressionStatementContext, predIndex:int):
            if predIndex == 0:
                return self.notOpenBraceAndNotFunction()
         

    def continueStatement_sempred(self, localctx:ContinueStatementContext, predIndex:int):
            if predIndex == 1:
                return self.notLineTerminator()
         

    def breakStatement_sempred(self, localctx:BreakStatementContext, predIndex:int):
            if predIndex == 2:
                return self.notLineTerminator()
         

    def returnStatement_sempred(self, localctx:ReturnStatementContext, predIndex:int):
            if predIndex == 3:
                return self.notLineTerminator()
         

    def yieldStatement_sempred(self, localctx:YieldStatementContext, predIndex:int):
            if predIndex == 4:
                return self.notLineTerminator()
         

    def throwStatement_sempred(self, localctx:ThrowStatementContext, predIndex:int):
            if predIndex == 5:
                return self.notLineTerminator()
         

    def classElement_sempred(self, localctx:ClassElementContext, predIndex:int):
            if predIndex == 6:
                return self.n("static")
         

            if predIndex == 7:
                return self.n("static")
         

            if predIndex == 8:
                return self.n("static")
         

    def methodDefinition_sempred(self, localctx:MethodDefinitionContext, predIndex:int):
            if predIndex == 9:
                return self.notLineTerminator()
         

    def singleExpression_sempred(self, localctx:SingleExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 32:
                return self.notLineTerminator()
         

            if predIndex == 33:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 34:
                return self.notLineTerminator()
         

            if predIndex == 35:
                return self.precpred(self._ctx, 9)
         

    def getter_sempred(self, localctx:GetterContext, predIndex:int):
            if predIndex == 36:
                return self.n("get")
         

    def setter_sempred(self, localctx:SetterContext, predIndex:int):
            if predIndex == 37:
                return self.n("set")
         

    def eos_sempred(self, localctx:EosContext, predIndex:int):
            if predIndex == 38:
                return self.lineTerminatorAhead()
         

            if predIndex == 39:
                return self.closeBrace()
         




