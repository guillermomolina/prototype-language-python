# Generated from /workspaces/prototype/antlr4/Python.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,75,572,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,
        0,1,0,1,1,1,1,1,2,1,2,3,2,190,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,3,25,301,8,25,1,25,1,25,3,25,305,8,25,1,
        25,3,25,308,8,25,3,25,310,8,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
        1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,
        1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,
        1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,
        1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,
        1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,
        1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,
        1,65,1,65,1,66,1,66,5,66,427,8,66,10,66,12,66,430,9,66,1,67,3,67,
        433,8,67,1,67,3,67,436,8,67,1,67,1,67,1,68,1,68,5,68,442,8,68,10,
        68,12,68,445,9,68,1,68,4,68,448,8,68,11,68,12,68,449,3,68,452,8,
        68,1,69,1,69,1,69,4,69,457,8,69,11,69,12,69,458,1,70,1,70,1,70,4,
        70,464,8,70,11,70,12,70,465,1,71,1,71,1,71,4,71,471,8,71,11,71,12,
        71,472,1,72,1,72,3,72,477,8,72,1,72,1,72,1,73,1,73,1,74,1,74,1,75,
        4,75,486,8,75,11,75,12,75,487,1,76,1,76,5,76,492,8,76,10,76,12,76,
        495,9,76,1,77,1,77,3,77,499,8,77,1,78,1,78,3,78,503,8,78,1,79,1,
        79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,5,84,518,
        8,84,10,84,12,84,521,9,84,1,84,1,84,1,84,1,84,5,84,527,8,84,10,84,
        12,84,530,9,84,1,84,3,84,533,8,84,1,85,1,85,1,85,1,86,3,86,539,8,
        86,1,86,1,86,1,86,1,86,3,86,545,8,86,1,87,1,87,3,87,549,8,87,1,87,
        1,87,1,88,4,88,554,8,88,11,88,12,88,555,1,89,1,89,4,89,560,8,89,
        11,89,12,89,561,1,90,1,90,3,90,566,8,90,1,90,4,90,569,8,90,11,90,
        12,90,570,0,0,91,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,
        127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
        73,147,74,149,75,151,0,153,0,155,0,157,0,159,0,161,0,163,0,165,0,
        167,0,169,0,171,0,173,0,175,0,177,0,179,0,181,0,1,0,18,2,0,85,85,
        117,117,2,0,82,82,114,114,2,0,88,88,120,120,2,0,79,79,111,111,2,
        0,66,66,98,98,1,0,1024,1279,2,0,9,9,32,32,2,0,10,10,13,13,3,0,65,
        90,95,95,97,122,1,0,48,57,1,0,49,57,1,0,48,55,3,0,48,57,65,70,97,
        102,1,0,48,49,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,
        92,92,2,0,69,69,101,101,2,0,43,43,45,45,586,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
        0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
        0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
        1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,
        0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,
        0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,
        141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,
        0,0,1,183,1,0,0,0,3,185,1,0,0,0,5,189,1,0,0,0,7,191,1,0,0,0,9,195,
        1,0,0,0,11,202,1,0,0,0,13,207,1,0,0,0,15,214,1,0,0,0,17,217,1,0,
        0,0,19,221,1,0,0,0,21,226,1,0,0,0,23,232,1,0,0,0,25,241,1,0,0,0,
        27,244,1,0,0,0,29,249,1,0,0,0,31,254,1,0,0,0,33,260,1,0,0,0,35,264,
        1,0,0,0,37,267,1,0,0,0,39,270,1,0,0,0,41,274,1,0,0,0,43,278,1,0,
        0,0,45,281,1,0,0,0,47,286,1,0,0,0,49,291,1,0,0,0,51,309,1,0,0,0,
        53,313,1,0,0,0,55,315,1,0,0,0,57,317,1,0,0,0,59,320,1,0,0,0,61,323,
        1,0,0,0,63,326,1,0,0,0,65,329,1,0,0,0,67,332,1,0,0,0,69,335,1,0,
        0,0,71,338,1,0,0,0,73,341,1,0,0,0,75,343,1,0,0,0,77,346,1,0,0,0,
        79,348,1,0,0,0,81,350,1,0,0,0,83,352,1,0,0,0,85,354,1,0,0,0,87,356,
        1,0,0,0,89,358,1,0,0,0,91,360,1,0,0,0,93,362,1,0,0,0,95,364,1,0,
        0,0,97,366,1,0,0,0,99,369,1,0,0,0,101,372,1,0,0,0,103,375,1,0,0,
        0,105,378,1,0,0,0,107,381,1,0,0,0,109,384,1,0,0,0,111,387,1,0,0,
        0,113,390,1,0,0,0,115,393,1,0,0,0,117,396,1,0,0,0,119,399,1,0,0,
        0,121,402,1,0,0,0,123,405,1,0,0,0,125,408,1,0,0,0,127,412,1,0,0,
        0,129,416,1,0,0,0,131,420,1,0,0,0,133,424,1,0,0,0,135,432,1,0,0,
        0,137,451,1,0,0,0,139,453,1,0,0,0,141,460,1,0,0,0,143,467,1,0,0,
        0,145,476,1,0,0,0,147,480,1,0,0,0,149,482,1,0,0,0,151,485,1,0,0,
        0,153,489,1,0,0,0,155,498,1,0,0,0,157,502,1,0,0,0,159,504,1,0,0,
        0,161,506,1,0,0,0,163,508,1,0,0,0,165,510,1,0,0,0,167,512,1,0,0,
        0,169,532,1,0,0,0,171,534,1,0,0,0,173,544,1,0,0,0,175,548,1,0,0,
        0,177,553,1,0,0,0,179,557,1,0,0,0,181,563,1,0,0,0,183,184,5,59,0,
        0,184,2,1,0,0,0,185,186,5,46,0,0,186,4,1,0,0,0,187,190,3,173,86,
        0,188,190,3,175,87,0,189,187,1,0,0,0,189,188,1,0,0,0,190,6,1,0,0,
        0,191,192,5,100,0,0,192,193,5,101,0,0,193,194,5,102,0,0,194,8,1,
        0,0,0,195,196,5,114,0,0,196,197,5,101,0,0,197,198,5,116,0,0,198,
        199,5,117,0,0,199,200,5,114,0,0,200,201,5,110,0,0,201,10,1,0,0,0,
        202,203,5,102,0,0,203,204,5,114,0,0,204,205,5,111,0,0,205,206,5,
        109,0,0,206,12,1,0,0,0,207,208,5,105,0,0,208,209,5,109,0,0,209,210,
        5,112,0,0,210,211,5,111,0,0,211,212,5,114,0,0,212,213,5,116,0,0,
        213,14,1,0,0,0,214,215,5,97,0,0,215,216,5,115,0,0,216,16,1,0,0,0,
        217,218,5,100,0,0,218,219,5,101,0,0,219,220,5,108,0,0,220,18,1,0,
        0,0,221,222,5,112,0,0,222,223,5,97,0,0,223,224,5,115,0,0,224,225,
        5,115,0,0,225,20,1,0,0,0,226,227,5,98,0,0,227,228,5,114,0,0,228,
        229,5,101,0,0,229,230,5,97,0,0,230,231,5,107,0,0,231,22,1,0,0,0,
        232,233,5,99,0,0,233,234,5,111,0,0,234,235,5,110,0,0,235,236,5,116,
        0,0,236,237,5,105,0,0,237,238,5,110,0,0,238,239,5,117,0,0,239,240,
        5,101,0,0,240,24,1,0,0,0,241,242,5,105,0,0,242,243,5,102,0,0,243,
        26,1,0,0,0,244,245,5,101,0,0,245,246,5,108,0,0,246,247,5,105,0,0,
        247,248,5,102,0,0,248,28,1,0,0,0,249,250,5,101,0,0,250,251,5,108,
        0,0,251,252,5,115,0,0,252,253,5,101,0,0,253,30,1,0,0,0,254,255,5,
        119,0,0,255,256,5,104,0,0,256,257,5,105,0,0,257,258,5,108,0,0,258,
        259,5,101,0,0,259,32,1,0,0,0,260,261,5,102,0,0,261,262,5,111,0,0,
        262,263,5,114,0,0,263,34,1,0,0,0,264,265,5,105,0,0,265,266,5,110,
        0,0,266,36,1,0,0,0,267,268,5,111,0,0,268,269,5,114,0,0,269,38,1,
        0,0,0,270,271,5,97,0,0,271,272,5,110,0,0,272,273,5,100,0,0,273,40,
        1,0,0,0,274,275,5,110,0,0,275,276,5,111,0,0,276,277,5,116,0,0,277,
        42,1,0,0,0,278,279,5,105,0,0,279,280,5,115,0,0,280,44,1,0,0,0,281,
        282,5,78,0,0,282,283,5,111,0,0,283,284,5,110,0,0,284,285,5,101,0,
        0,285,46,1,0,0,0,286,287,5,84,0,0,287,288,5,114,0,0,288,289,5,117,
        0,0,289,290,5,101,0,0,290,48,1,0,0,0,291,292,5,70,0,0,292,293,5,
        97,0,0,293,294,5,108,0,0,294,295,5,115,0,0,295,296,5,101,0,0,296,
        50,1,0,0,0,297,298,4,25,0,0,298,310,3,151,75,0,299,301,5,13,0,0,
        300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,305,5,10,0,0,
        303,305,5,13,0,0,304,300,1,0,0,0,304,303,1,0,0,0,305,307,1,0,0,0,
        306,308,3,151,75,0,307,306,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,
        0,309,297,1,0,0,0,309,304,1,0,0,0,310,311,1,0,0,0,311,312,6,25,0,
        0,312,52,1,0,0,0,313,314,5,44,0,0,314,54,1,0,0,0,315,316,5,58,0,
        0,316,56,1,0,0,0,317,318,5,40,0,0,318,319,6,28,1,0,319,58,1,0,0,
        0,320,321,5,41,0,0,321,322,6,29,2,0,322,60,1,0,0,0,323,324,5,91,
        0,0,324,325,6,30,3,0,325,62,1,0,0,0,326,327,5,93,0,0,327,328,6,31,
        4,0,328,64,1,0,0,0,329,330,5,123,0,0,330,331,6,32,5,0,331,66,1,0,
        0,0,332,333,5,125,0,0,333,334,6,33,6,0,334,68,1,0,0,0,335,336,5,
        60,0,0,336,337,5,60,0,0,337,70,1,0,0,0,338,339,5,62,0,0,339,340,
        5,62,0,0,340,72,1,0,0,0,341,342,5,42,0,0,342,74,1,0,0,0,343,344,
        5,42,0,0,344,345,5,42,0,0,345,76,1,0,0,0,346,347,5,61,0,0,347,78,
        1,0,0,0,348,349,5,43,0,0,349,80,1,0,0,0,350,351,5,45,0,0,351,82,
        1,0,0,0,352,353,5,47,0,0,353,84,1,0,0,0,354,355,5,37,0,0,355,86,
        1,0,0,0,356,357,5,124,0,0,357,88,1,0,0,0,358,359,5,94,0,0,359,90,
        1,0,0,0,360,361,5,38,0,0,361,92,1,0,0,0,362,363,5,60,0,0,363,94,
        1,0,0,0,364,365,5,62,0,0,365,96,1,0,0,0,366,367,5,61,0,0,367,368,
        5,61,0,0,368,98,1,0,0,0,369,370,5,62,0,0,370,371,5,61,0,0,371,100,
        1,0,0,0,372,373,5,60,0,0,373,374,5,61,0,0,374,102,1,0,0,0,375,376,
        5,60,0,0,376,377,5,62,0,0,377,104,1,0,0,0,378,379,5,33,0,0,379,380,
        5,61,0,0,380,106,1,0,0,0,381,382,5,43,0,0,382,383,5,61,0,0,383,108,
        1,0,0,0,384,385,5,45,0,0,385,386,5,61,0,0,386,110,1,0,0,0,387,388,
        5,42,0,0,388,389,5,61,0,0,389,112,1,0,0,0,390,391,5,64,0,0,391,392,
        5,61,0,0,392,114,1,0,0,0,393,394,5,47,0,0,394,395,5,61,0,0,395,116,
        1,0,0,0,396,397,5,37,0,0,397,398,5,61,0,0,398,118,1,0,0,0,399,400,
        5,38,0,0,400,401,5,61,0,0,401,120,1,0,0,0,402,403,5,124,0,0,403,
        404,5,61,0,0,404,122,1,0,0,0,405,406,5,94,0,0,406,407,5,61,0,0,407,
        124,1,0,0,0,408,409,5,60,0,0,409,410,5,60,0,0,410,411,5,61,0,0,411,
        126,1,0,0,0,412,413,5,62,0,0,413,414,5,62,0,0,414,415,5,61,0,0,415,
        128,1,0,0,0,416,417,5,42,0,0,417,418,5,42,0,0,418,419,5,61,0,0,419,
        130,1,0,0,0,420,421,5,47,0,0,421,422,5,47,0,0,422,423,5,61,0,0,423,
        132,1,0,0,0,424,428,3,155,77,0,425,427,3,157,78,0,426,425,1,0,0,
        0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,134,1,0,0,
        0,430,428,1,0,0,0,431,433,7,0,0,0,432,431,1,0,0,0,432,433,1,0,0,
        0,433,435,1,0,0,0,434,436,7,1,0,0,435,434,1,0,0,0,435,436,1,0,0,
        0,436,437,1,0,0,0,437,438,3,169,84,0,438,136,1,0,0,0,439,443,3,159,
        79,0,440,442,3,161,80,0,441,440,1,0,0,0,442,445,1,0,0,0,443,441,
        1,0,0,0,443,444,1,0,0,0,444,452,1,0,0,0,445,443,1,0,0,0,446,448,
        5,48,0,0,447,446,1,0,0,0,448,449,1,0,0,0,449,447,1,0,0,0,449,450,
        1,0,0,0,450,452,1,0,0,0,451,439,1,0,0,0,451,447,1,0,0,0,452,138,
        1,0,0,0,453,454,5,48,0,0,454,456,7,2,0,0,455,457,3,165,82,0,456,
        455,1,0,0,0,457,458,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,
        140,1,0,0,0,460,461,5,48,0,0,461,463,7,3,0,0,462,464,3,163,81,0,
        463,462,1,0,0,0,464,465,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,
        466,142,1,0,0,0,467,468,5,48,0,0,468,470,7,4,0,0,469,471,3,167,83,
        0,470,469,1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,
        0,473,144,1,0,0,0,474,477,3,151,75,0,475,477,3,153,76,0,476,474,
        1,0,0,0,476,475,1,0,0,0,477,478,1,0,0,0,478,479,6,72,7,0,479,146,
        1,0,0,0,480,481,9,0,0,0,481,148,1,0,0,0,482,483,7,5,0,0,483,150,
        1,0,0,0,484,486,7,6,0,0,485,484,1,0,0,0,486,487,1,0,0,0,487,485,
        1,0,0,0,487,488,1,0,0,0,488,152,1,0,0,0,489,493,5,35,0,0,490,492,
        8,7,0,0,491,490,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,
        1,0,0,0,494,154,1,0,0,0,495,493,1,0,0,0,496,499,7,8,0,0,497,499,
        3,149,74,0,498,496,1,0,0,0,498,497,1,0,0,0,499,156,1,0,0,0,500,503,
        3,155,77,0,501,503,7,9,0,0,502,500,1,0,0,0,502,501,1,0,0,0,503,158,
        1,0,0,0,504,505,7,10,0,0,505,160,1,0,0,0,506,507,7,9,0,0,507,162,
        1,0,0,0,508,509,7,11,0,0,509,164,1,0,0,0,510,511,7,12,0,0,511,166,
        1,0,0,0,512,513,7,13,0,0,513,168,1,0,0,0,514,519,5,39,0,0,515,518,
        3,171,85,0,516,518,8,14,0,0,517,515,1,0,0,0,517,516,1,0,0,0,518,
        521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,
        519,1,0,0,0,522,533,5,39,0,0,523,528,5,34,0,0,524,527,3,171,85,0,
        525,527,8,15,0,0,526,524,1,0,0,0,526,525,1,0,0,0,527,530,1,0,0,0,
        528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,
        531,533,5,34,0,0,532,514,1,0,0,0,532,523,1,0,0,0,533,170,1,0,0,0,
        534,535,5,92,0,0,535,536,9,0,0,0,536,172,1,0,0,0,537,539,3,177,88,
        0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,545,3,179,
        89,0,541,542,3,177,88,0,542,543,5,46,0,0,543,545,1,0,0,0,544,538,
        1,0,0,0,544,541,1,0,0,0,545,174,1,0,0,0,546,549,3,177,88,0,547,549,
        3,173,86,0,548,546,1,0,0,0,548,547,1,0,0,0,549,550,1,0,0,0,550,551,
        3,181,90,0,551,176,1,0,0,0,552,554,3,161,80,0,553,552,1,0,0,0,554,
        555,1,0,0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,178,1,0,0,0,557,
        559,5,46,0,0,558,560,3,161,80,0,559,558,1,0,0,0,560,561,1,0,0,0,
        561,559,1,0,0,0,561,562,1,0,0,0,562,180,1,0,0,0,563,565,7,16,0,0,
        564,566,7,17,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,
        567,569,3,161,80,0,568,567,1,0,0,0,569,570,1,0,0,0,570,568,1,0,0,
        0,570,571,1,0,0,0,571,182,1,0,0,0,32,0,189,300,304,307,309,428,432,
        435,443,449,451,458,465,472,476,487,493,498,502,517,519,526,528,
        532,538,544,548,555,561,565,570,8,1,25,0,1,28,1,1,29,2,1,30,3,1,
        31,4,1,32,5,1,33,6,6,0,0
    ]

class PythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    FLOAT_NUMBER = 3
    DEF = 4
    RETURN = 5
    FROM = 6
    IMPORT = 7
    AS = 8
    DEL = 9
    PASS = 10
    BREAK = 11
    CONTINUE = 12
    IF = 13
    ELIF = 14
    ELSE = 15
    WHILE = 16
    FOR = 17
    IN = 18
    OR = 19
    AND = 20
    NOT = 21
    IS = 22
    NONE = 23
    TRUE = 24
    FALSE = 25
    NEWLINE = 26
    COMMA = 27
    COLON = 28
    OPEN_PAREN = 29
    CLOSE_PAREN = 30
    OPEN_BRACK = 31
    CLOSE_BRACK = 32
    OPEN_BRACE = 33
    CLOSE_BRACE = 34
    LEFT_SHIFT = 35
    RIGHT_SHIFT = 36
    STAR = 37
    POWER = 38
    ASSIGN = 39
    ADD = 40
    MINUS = 41
    DIV = 42
    MOD = 43
    OR_OP = 44
    XOR = 45
    AND_OP = 46
    LESS_THAN = 47
    GREATER_THAN = 48
    EQUALS = 49
    GT_EQ = 50
    LT_EQ = 51
    NOT_EQ_1 = 52
    NOT_EQ_2 = 53
    ADD_ASSIGN = 54
    SUB_ASSIGN = 55
    MULT_ASSIGN = 56
    AT_ASSIGN = 57
    DIV_ASSIGN = 58
    MOD_ASSIGN = 59
    AND_ASSIGN = 60
    OR_ASSIGN = 61
    XOR_ASSIGN = 62
    LEFT_SHIFT_ASSIGN = 63
    RIGHT_SHIFT_ASSIGN = 64
    POWER_ASSIGN = 65
    IDIV_ASSIGN = 66
    NAME = 67
    STRING_LITERAL = 68
    DECIMAL_INTEGER = 69
    HEX_INTEGER = 70
    OCT_INTEGER = 71
    BIN_INTEGER = 72
    IGNORE = 73
    UNKNOWN_CHAR = 74
    CYRILLIC_RANGE = 75

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'.'", "'def'", "'return'", "'from'", "'import'", "'as'", 
            "'del'", "'pass'", "'break'", "'continue'", "'if'", "'elif'", 
            "'else'", "'while'", "'for'", "'in'", "'or'", "'and'", "'not'", 
            "'is'", "'None'", "'True'", "'False'", "','", "':'", "'('", 
            "')'", "'['", "']'", "'{'", "'}'", "'<<'", "'>>'", "'*'", "'**'", 
            "'='", "'+'", "'-'", "'/'", "'%'", "'|'", "'^'", "'&'", "'<'", 
            "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'+='", "'-='", 
            "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", 
            "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>",
            "FLOAT_NUMBER", "DEF", "RETURN", "FROM", "IMPORT", "AS", "DEL", 
            "PASS", "BREAK", "CONTINUE", "IF", "ELIF", "ELSE", "WHILE", 
            "FOR", "IN", "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", 
            "NEWLINE", "COMMA", "COLON", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", 
            "CLOSE_BRACK", "OPEN_BRACE", "CLOSE_BRACE", "LEFT_SHIFT", "RIGHT_SHIFT", 
            "STAR", "POWER", "ASSIGN", "ADD", "MINUS", "DIV", "MOD", "OR_OP", 
            "XOR", "AND_OP", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", 
            "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ADD_ASSIGN", "SUB_ASSIGN", 
            "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
            "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
            "POWER_ASSIGN", "IDIV_ASSIGN", "NAME", "STRING_LITERAL", "DECIMAL_INTEGER", 
            "HEX_INTEGER", "OCT_INTEGER", "BIN_INTEGER", "IGNORE", "UNKNOWN_CHAR", 
            "CYRILLIC_RANGE" ]

    ruleNames = [ "T__0", "T__1", "FLOAT_NUMBER", "DEF", "RETURN", "FROM", 
                  "IMPORT", "AS", "DEL", "PASS", "BREAK", "CONTINUE", "IF", 
                  "ELIF", "ELSE", "WHILE", "FOR", "IN", "OR", "AND", "NOT", 
                  "IS", "NONE", "TRUE", "FALSE", "NEWLINE", "COMMA", "COLON", 
                  "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
                  "OPEN_BRACE", "CLOSE_BRACE", "LEFT_SHIFT", "RIGHT_SHIFT", 
                  "STAR", "POWER", "ASSIGN", "ADD", "MINUS", "DIV", "MOD", 
                  "OR_OP", "XOR", "AND_OP", "LESS_THAN", "GREATER_THAN", 
                  "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ADD_ASSIGN", 
                  "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                  "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                  "IDIV_ASSIGN", "NAME", "STRING_LITERAL", "DECIMAL_INTEGER", 
                  "HEX_INTEGER", "OCT_INTEGER", "BIN_INTEGER", "IGNORE", 
                  "UNKNOWN_CHAR", "CYRILLIC_RANGE", "SPACES", "COMMENT", 
                  "ID_START", "ID_CONTINUE", "NON_ZERO_DIGIT", "DIGIT", 
                  "OCT_DIGIT", "HEX_DIGIT", "BIN_DIGIT", "SHORT_STRING", 
                  "STRING_ESCAPE_SEQ", "POINT_FLOAT", "EXPONENT_FLOAT", 
                  "INT_PART", "FRACTION", "EXPONENT" ]

    grammarFileName = "Python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None

     

    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[25] = self.NEWLINE_action 
            actions[28] = self.OPEN_PAREN_action 
            actions[29] = self.CLOSE_PAREN_action 
            actions[30] = self.OPEN_BRACK_action 
            actions[31] = self.CLOSE_BRACK_action 
            actions[32] = self.OPEN_BRACE_action 
            actions[33] = self.CLOSE_BRACE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.newLineAction() 
     

    def OPEN_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             self.opened += 1 
     

    def CLOSE_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
             self.opened -= 1 
     

    def OPEN_BRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             self.opened += 1 
     

    def CLOSE_BRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
             self.opened -= 1 
     

    def OPEN_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
             self.opened += 1 
     

    def CLOSE_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
             self.opened -= 1 
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[25] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.atStartOfInput()
         


